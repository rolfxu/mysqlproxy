/* Generated By:JavaCC: Do not edit this line. SqlParserImpl.java */
package com.maxleap.mysqlproxy.parser;


import com.maxleap.mysqlproxy.parser.expression.*;
import com.maxleap.mysqlproxy.parser.schema.*;
import com.maxleap.mysqlproxy.parser.statement.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.*;
/**
 * SQL parser, generated from Parser.jj by JavaCC.
 *
 * <p>The public wrapper for this parser is {@link SqlParser}.
 */
public class SqlParserImpl implements SqlParserImplConstants {
    private static final Logger LOGGER =  LoggerFactory.getLogger(SqlParserImpl.class);

    // Can't use quoted literal because of a bug in how JavaCC translates
    // backslash-backslash.
    // \
    private static final char BACKSLASH = 0x5c;
    // "
    private static final char DOUBLE_QUOTE = 0x22;
    private static final String DQ = DOUBLE_QUOTE + "";
    private static final String DQDQ = DQ + DQ;



    public void setTabSize(int tabSize) {
        jj_input_stream.setTabSize(tabSize);
    }

    public void switchTo(String stateName) {
        int state = Arrays.asList(SqlParserImplTokenManager.lexStateNames)
            .indexOf(stateName);
        token_source.SwitchTo(state);
    }

  void debug_message1() throws ParseException {
    LOGGER.info("{} , {}", getToken(0).image, getToken(1).image);
  }

/**
 * Parses an SQL statement.
 */
  final public Expression SqlStmt() throws ParseException {
    Expression plainSelect=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALTER:
      SqlAlterStmt();
      break;
    case SELECT:
    case LPAREN:
      plainSelect = sqlOp();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
    jj_consume_token(0);
        {if (true) return plainSelect;}
    throw new Error("Missing return statement in function");
  }

  final public Expression hiveDistribute() throws ParseException {
  Expression sortBy = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTRIBUTE:
      jj_consume_token(DISTRIBUTE);
      jj_consume_token(BY);
      SelectExpression();
      sortBy = OrderBy();
      break;
    default:
      jj_la1[1] = jj_gen;
           sortBy=null;
    }
                {if (true) return sortBy;}
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression sqlOp() throws ParseException {
  Expression orderBy,op,rightSelect;
  Expression plainSelect=null;
  boolean hasOp =false;
  List operators= new ArrayList();
  List rightSelects= new ArrayList();
    plainSelect = sqlSelectSingle();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      op = BinaryQueryOperator();
                               hasOp=true;operators.add(op);
      rightSelect = sqlSelectSingle();
                                        rightSelects.add(rightSelect);
    }
    orderBy = OrderBy();
    if (jj_2_1(2)) {
      limitClause();
    } else {
      ;
    }
      if(hasOp) {
                {if (true) return new Select(plainSelect,operators,rightSelects);}
      } else {
                {if (true) return plainSelect;}
      }
    throw new Error("Missing return statement in function");
  }

  final public Expression BinaryQueryOperator() throws ParseException {
    jj_consume_token(UNION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
                    {if (true) return SqlOperation.UNION_ALL;}
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
         {if (true) return SqlOperation.UNION;}
    throw new Error("Missing return statement in function");
  }

  final public Expression sqlSelectSingle() throws ParseException {
  Expression plainSelect=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      plainSelect = SqlSelectStmt();
      break;
    case LPAREN:
      plainSelect = ParenthesizedQueryOrCommaList();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return plainSelect;}
    throw new Error("Missing return statement in function");
  }

  final public Expression SqlSelectStmt() throws ParseException {
 List keywords = new ArrayList();
 Expression where = null;
 Expression plain = new PlainSelect();
 List selectItems = null;
 Expression fromItem = null;
 GroupByElements groupExpression = null;

 Limit limit = null;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
    case HIGH_PRIORITY:
    case STRAIGHT_JOIN:
    case SQL_BIG_RESULT:
    case SQL_BUFFER_RESULT:
    case SQL_CALC_FOUND_ROWS:
    case SQL_NO_CACHE:
    case SQL_SMALL_RESULT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRAIGHT_JOIN:
        jj_consume_token(STRAIGHT_JOIN);
                        keywords.add(STRAIGHT_JOIN);
        break;
      case HIGH_PRIORITY:
        jj_consume_token(HIGH_PRIORITY);
            keywords.add(HIGH_PRIORITY);
        break;
      case DISTINCT:
        jj_consume_token(DISTINCT);
            keywords.add(DISTINCT );
        break;
      case SQL_SMALL_RESULT:
        jj_consume_token(SQL_SMALL_RESULT);
                        keywords.add(SQL_SMALL_RESULT);
        break;
      case SQL_BIG_RESULT:
        jj_consume_token(SQL_BIG_RESULT);
            keywords.add(SQL_BIG_RESULT);
        break;
      case SQL_BUFFER_RESULT:
        jj_consume_token(SQL_BUFFER_RESULT);
            keywords.add(SQL_BUFFER_RESULT);
        break;
      case SQL_CALC_FOUND_ROWS:
        jj_consume_token(SQL_CALC_FOUND_ROWS);
            keywords.add(SQL_CALC_FOUND_ROWS);
        break;
      case SQL_NO_CACHE:
        jj_consume_token(SQL_NO_CACHE);
            keywords.add(SQL_NO_CACHE);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    selectItems = SelectList();
                ((PlainSelect)plain).setSelectItems(selectItems);
    fromItem = FromExpress();
                ((PlainSelect)plain).setFromItem((FromItem)fromItem);
    where = WhereClause();
        ((PlainSelect)plain).setWhere(where);
    groupExpression = GroupByOpt();
                ((PlainSelect)plain).setGroupBy(groupExpression);
    HavingOpt();
    OrderBy();
    if (jj_2_2(2)) {
      limit = limitClause();
                                        ((PlainSelect)plain).setLimit(limit);
    } else {
      ;
    }
  {if (true) return plain;}
    throw new Error("Missing return statement in function");
  }

  final public Limit limitClause() throws ParseException {
        Expression start,count;
        Limit limit = new Limit();
    jj_consume_token(LIMIT);
    if (jj_2_4(2)) {
      start = UnsignedNumericLiteralOrParam();
                                limit.setOffset(start);
      if (jj_2_3(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          count = UnsignedNumericLiteralOrParam();
                                limit.setRowCount(count);
          break;
        case OFFSET:
          jj_consume_token(OFFSET);
          start = UnsignedNumericLiteralOrParam();
                limit.setRowCount(limit.getOffset());
                limit.setHasOffset(true);
                                limit.setOffset(start);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return limit;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnsignedNumericLiteralOrParam() throws ParseException {
  Expression e = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
      e = UnsignedNumericLiteral();
      break;
    case HOOK:
      e = jdbcParam();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression FromExpress() throws ParseException {
  Expression table=null;
  ValuesList valuses = null;
  Expression tmp = null;
  boolean singleTable = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      jj_consume_token(FROM);
      table = TableRef();
      label_2:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_2;
        }
        tmp = TableJoin();
                        if(valuses==null ) {
                                singleTable = false;
                                valuses = new ValuesList();
                                valuses.addExpression(table);
                        }
                        valuses.addExpression(tmp);
      }
  {if (true) return singleTable?table:valuses;}
      break;
    default:
      jj_la1[10] = jj_gen;
    {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression TableJoin() throws ParseException {
        Expression expression = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      expression = TableRef();
      break;
    case CROSS:
    case FULL:
    case INNER:
    case JOIN:
    case LEFT:
    case RIGHT:
    case NATURAL:
      expression = sqlJoin();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                  {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression sqlJoin() throws ParseException {
  String joinType=null;
  Expression joinExpression = null;
  Join join = new Join();
  Expression onExpression;
    Natural();
    joinType = JoinType();
                        switch (joinType) {
                        case "INNER":
                                 join.setInner(true);
                                 break;
                                case "LEFT":
                                join.setLeft(true);
                                 break;
                                case "RIGHT":
                                 join.setRight(true);
                                 break;
                                case "FULL":
                                 join.setFull(true);
                                 break;
                                case "CROSS":
                                join.setCross(true);
                                 break;
                                default:
                                        break;
                                }
    joinExpression = TableRef();
                        join.setRightItem(joinExpression);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case BINARY_STRING_LITERAL:
    case QUOTED_STRING:
    case QUOTED_STRING_LITERAL:
    case QUOTED_STRING_LITERAL2:
    case BACK_QUOTED_IDENTIFIER:
    case QUOTED_IDENTIFIER:
    case BRACKET_QUOTED_IDENTIFIER:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      IdentifierSegment();

      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON:
      jj_consume_token(ON);
      onExpression = SelectExpression();
                                join.setOnExpression(onExpression);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
                   {if (true) return join;}
    throw new Error("Missing return statement in function");
  }

  final public Expression TableRef() throws ParseException {
  Expression table=null;
  Expression aliasExpress=null;;
  Expression list = null;
  boolean useAs = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      table = ParenthesizedQueryOrCommaList();
      if (jj_2_6(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
                                   useAs=true;
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        aliasExpress = IdentifierSegment();
      } else {
        ;
      }
               SubSelect subSelect = new SubSelect();
               subSelect.setExpression(table);
               if(aliasExpress!=null) {
                  Alias alias = new Alias(aliasExpress.toString());
                  alias.setUseAs(useAs);
                 subSelect.setAlias(alias);
                 }
               {if (true) return subSelect;}
      break;
    case BINARY_STRING_LITERAL:
    case QUOTED_STRING:
    case QUOTED_STRING_LITERAL:
    case QUOTED_STRING_LITERAL2:
    case BACK_QUOTED_IDENTIFIER:
    case QUOTED_IDENTIFIER:
    case BRACKET_QUOTED_IDENTIFIER:
    case IDENTIFIER:
      table = CompoundIdentifier();
      if (jj_2_7(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
                             useAs=true;
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        aliasExpress = IdentifierSegment();
                      Alias alias = new Alias(aliasExpress.toString());
                                ((FromItem)table).setAlias(alias);
      } else {
        ;
      }
              {if (true) return table;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression OrderBy() throws ParseException {
  Expression orderBy;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
    case SORT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER:
        jj_consume_token(ORDER);
        break;
      case SORT:
        jj_consume_token(SORT);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(BY);
      orderBy = OrderItem();
      label_3:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
        orderBy = OrderItem();
      }
         {if (true) return orderBy;}
      break;
    default:
      jj_la1[19] = jj_gen;
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression OrderItem() throws ParseException {
    Expression e;
    String asc=null;
    e = SelectExpression();
    if (jj_2_9(2)) {
      jj_consume_token(DESC);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);
        break;
      default:
        jj_la1[20] = jj_gen;
        asc=null;
      }
    }
        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public GroupByElements GroupByOpt() throws ParseException {
    Expression group;
    GroupByElements groupElements = new GroupByElements();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP:
      jj_consume_token(GROUP);
      jj_consume_token(BY);
      group = SelectExpression();
groupElements.addGroupByExpression(group);
      label_4:
      while (true) {
        if (jj_2_10(2147483647)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMMA);
        group = SelectExpression();
groupElements.addGroupByExpression(group);
      }
      {if (true) return groupElements;}
      break;
    default:
      jj_la1[21] = jj_gen;
        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression HavingOpt() throws ParseException {
    Expression having;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HAVING:
      jj_consume_token(HAVING);
      having = SelectExpression();
                                            {if (true) return having;}
      break;
    default:
      jj_la1[22] = jj_gen;
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression WhereClause() throws ParseException {
                            Expression condition=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      condition = WhereConditon();
      hiveDistribute();
        {if (true) return condition;}
      break;
    default:
      jj_la1[23] = jj_gen;
        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression WhereConditon() throws ParseException {
  Expression condition=null;
  ExpressionList list = new ExpressionList();
    condition = SelectExpression();
list.addExpression(condition);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case IN:
      case NOT:
      case OR:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_5;
      }
      if (jj_2_11(2147483647)) {
        jj_consume_token(NOT);
        jj_consume_token(IN);
        ParenthesizedQueryOrCommaList();
      } else if (jj_2_12(2147483647)) {
        jj_consume_token(IN);
        ParenthesizedQueryOrCommaList();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            jj_consume_token(AND);
            break;
          case OR:
            jj_consume_token(OR);
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          condition = SelectExpression();
list.addExpression(condition);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

//select_item_list
  final public List SelectList() throws ParseException {
    List list = new ArrayList();
    Expression item=null;
    item = SelectItem();
        list.add(item);
    label_6:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(COMMA);
      item = SelectItem();
          list.add(item);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Expression SelectItem() throws ParseException {
        Expression item=null;
        Expression aliasName=null;
        Alias alias = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case AVG:
    case BIT_AND:
    case BIT_OR:
    case BIT_XOR:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case EXISTS:
    case MAX:
    case MIN:
    case NOT:
    case NULL:
    case STD:
    case STDDEV_SAMP:
    case SUM:
    case VAR_SAMP:
    case VARIANCE:
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
    case BINARY_STRING_LITERAL:
    case QUOTED_STRING:
    case QUOTED_STRING_LITERAL:
    case QUOTED_STRING_LITERAL2:
    case LPAREN:
    case PLUS:
    case MINUS:
    case BACK_QUOTED_IDENTIFIER:
    case QUOTED_IDENTIFIER:
    case BRACKET_QUOTED_IDENTIFIER:
    case IDENTIFIER:
      item = SelectExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
      case BINARY_STRING_LITERAL:
      case QUOTED_STRING:
      case QUOTED_STRING_LITERAL:
      case QUOTED_STRING_LITERAL2:
      case BACK_QUOTED_IDENTIFIER:
      case QUOTED_IDENTIFIER:
      case BRACKET_QUOTED_IDENTIFIER:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
                 alias =  new Alias();alias.setUseAs(true);
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        aliasName = IdentifierSegment();
                if(alias==null ) {
                                alias =  new Alias();
                                alias.setUseAs(false);
                                alias.setName(aliasName.toString());
                } else {
                  alias.setName(aliasName.toString());
            }
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
                 SelectExpressionItem selitem = new SelectExpressionItem(item);
         if(alias!=null)
         selitem.setAlias(alias);
         {if (true) return selitem;}
      break;
    case STAR:
      jj_consume_token(STAR);
        {if (true) return new AllColumns();}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression SelectExpression() throws ParseException {
        Expression express = null;
        Expression expression2 = null;
        Expression tmpExpression = null;
        Expression expression3 = null;
        Expression op=null;
        List list = new LinkedList();
    //  LOOKAHEAD( < EXISTS > )
    //  < EXISTS >
    //  express= ParenthesizedQueryOrCommaList()
    //{
    //  return new ExistsExpression(express);
    //return express;
    //}
    //| 
    
        express = expression2();
      list.add(express);
    label_7:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BETWEEN:
        jj_consume_token(BETWEEN);
        expression2 = expression2();
        label_8:
        while (true) {
          jj_consume_token(AND);
          expression3 = SelectExpression();
          if (jj_2_15(2)) {
            ;
          } else {
            break label_8;
          }
        }
                        Between between = new Between();
                        between.setLeftExpression(express);
                        between.setBetweenExpressionStart(expression2);
                        between.setBetweenExpressionEnd(expression3);
                        {if (true) return between;}
        break;
      case AND:
      case IN:
      case IS:
      case NOT:
      case OR:
      case EQ:
      case GT:
      case LT:
      case LE:
      case GE:
      case NE:
      case NE2:
      case LIKE:
      case PLUS:
      case EQ2:
      case MINUS:
      case STAR:
      case SLASH:
      case PERCENT_REMAINDER:
      case REGEXP:
        op = BinaryRowOperator();
                                list.add(op);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY:
        case AVG:
        case BIT_AND:
        case BIT_OR:
        case BIT_XOR:
        case CASE:
        case CAST:
        case CONVERT:
        case COUNT:
        case EXISTS:
        case MAX:
        case MIN:
        case NOT:
        case NULL:
        case STD:
        case STDDEV_SAMP:
        case SUM:
        case VAR_SAMP:
        case VARIANCE:
        case UNSIGNED_INTEGER_LITERAL:
        case APPROX_NUMERIC_LITERAL:
        case DECIMAL_NUMERIC_LITERAL:
        case BINARY_STRING_LITERAL:
        case QUOTED_STRING:
        case QUOTED_STRING_LITERAL:
        case QUOTED_STRING_LITERAL2:
        case LPAREN:
        case PLUS:
        case MINUS:
        case BACK_QUOTED_IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case BRACKET_QUOTED_IDENTIFIER:
        case IDENTIFIER:
          tmpExpression = expression2();
                                 list.add(tmpExpression);
          break;
        case HOOK:
          expression2 = jdbcParam();
                                   list.add(expression2);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
       {if (true) return com.maxleap.mysqlproxy.parser.utils.SqlParserUtils.toTree(list);}
    throw new Error("Missing return statement in function");
  }

  final public String Natural() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL:
      jj_consume_token(NATURAL);
                {if (true) return "Natural";}
      break;
    default:
      jj_la1[32] = jj_gen;
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression jdbcParam() throws ParseException {
    jj_consume_token(HOOK);
     {if (true) return new JdbcParameter();}
    throw new Error("Missing return statement in function");
  }

  final public Expression expression2() throws ParseException {
Expression pt,prefix=null;
Expression et;
ExpressionList result=  new ExpressionList();
result.setComma(false);
result.setParen(false);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXISTS:
      case NOT:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_9;
      }
      prefix = PrefixRowOperator();
        result.addExpression(prefix);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVG:
    case BIT_AND:
    case BIT_OR:
    case BIT_XOR:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case MAX:
    case MIN:
    case NULL:
    case STD:
    case STDDEV_SAMP:
    case SUM:
    case VAR_SAMP:
    case VARIANCE:
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
    case BINARY_STRING_LITERAL:
    case QUOTED_STRING:
    case QUOTED_STRING_LITERAL:
    case QUOTED_STRING_LITERAL2:
    case PLUS:
    case MINUS:
    case BACK_QUOTED_IDENTIFIER:
    case QUOTED_IDENTIFIER:
    case BRACKET_QUOTED_IDENTIFIER:
    case IDENTIFIER:
      et = Expression3();
      break;
    case ANY:
    case LPAREN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
        jj_consume_token(ANY);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      et = ParenthesizedQueryOrCommaList();
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        result.addExpression(et);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression3() throws ParseException {
   Expression express = null;
    express = AtomicRowExpression();
        {if (true) return express;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ParenthesizedQueryOrCommaList() throws ParseException {
     Expression e=null;

     ExpressionList result=  new ExpressionList();
    jj_consume_token(LPAREN);
    if (jj_2_16(2147483647)) {
      e = sqlOp();
                result.addExpression(e);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
      case AVG:
      case BIT_AND:
      case BIT_OR:
      case BIT_XOR:
      case CASE:
      case CAST:
      case CONVERT:
      case COUNT:
      case EXISTS:
      case MAX:
      case MIN:
      case NOT:
      case NULL:
      case STD:
      case STDDEV_SAMP:
      case SUM:
      case VAR_SAMP:
      case VARIANCE:
      case UNSIGNED_INTEGER_LITERAL:
      case APPROX_NUMERIC_LITERAL:
      case DECIMAL_NUMERIC_LITERAL:
      case BINARY_STRING_LITERAL:
      case QUOTED_STRING:
      case QUOTED_STRING_LITERAL:
      case QUOTED_STRING_LITERAL2:
      case LPAREN:
      case PLUS:
      case MINUS:
      case BACK_QUOTED_IDENTIFIER:
      case QUOTED_IDENTIFIER:
      case BRACKET_QUOTED_IDENTIFIER:
      case IDENTIFIER:
        e = WhereConditon();
                result.addExpression(e);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      e = SelectExpression();
                result.addExpression(e);
    }
    jj_consume_token(RPAREN);
       {if (true) return new Parenthesis(result);}
    throw new Error("Missing return statement in function");
  }

  final public Expression AtomicRowExpression() throws ParseException {
   Expression express;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVG:
    case BIT_AND:
    case BIT_OR:
    case BIT_XOR:
    case CAST:
    case CONVERT:
    case COUNT:
    case MAX:
    case MIN:
    case STD:
    case STDDEV_SAMP:
    case SUM:
    case VAR_SAMP:
    case VARIANCE:
      express = BuiltinFunctionCall();
      break;
    default:
      jj_la1[38] = jj_gen;
      if (jj_2_17(2147483647)) {
        express = FunctionCall();
      } else if (jj_2_18(2)) {
        express = CompoundIdentifier();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NULL:
        case UNSIGNED_INTEGER_LITERAL:
        case APPROX_NUMERIC_LITERAL:
        case DECIMAL_NUMERIC_LITERAL:
        case BINARY_STRING_LITERAL:
        case QUOTED_STRING:
        case QUOTED_STRING_LITERAL:
        case QUOTED_STRING_LITERAL2:
        case PLUS:
        case MINUS:
        case BACK_QUOTED_IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case BRACKET_QUOTED_IDENTIFIER:
        case IDENTIFIER:
          express = Literal();
          break;
        case CASE:
          express = CaseExpression();
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if (true) return express;}
    throw new Error("Missing return statement in function");
  }

  final public Expression FunctionCall() throws ParseException {
 Function function = new Function();
 Expression funcName;Expression args;
    funcName = FunctionName();
         function.setName(( (ExpressionList)funcName).toName());
    jj_consume_token(LPAREN);
    args = Args();
                                function.setParameters((ExpressionList)args);
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OVER:
      jj_consume_token(OVER);
      WindowSpecification();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
                 {if (true) return function;}
    throw new Error("Missing return statement in function");
  }

  final public Expression WindowSpecification() throws ParseException {
Expression id;Expression partitionList,orderList;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BINARY_STRING_LITERAL:
    case QUOTED_STRING:
    case QUOTED_STRING_LITERAL:
    case QUOTED_STRING_LITERAL2:
    case BACK_QUOTED_IDENTIFIER:
    case QUOTED_IDENTIFIER:
    case BRACKET_QUOTED_IDENTIFIER:
    case IDENTIFIER:
      id = IdentifierSegment();
      break;
    default:
      jj_la1[41] = jj_gen;
          id = null;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARTITION:
      jj_consume_token(PARTITION);
      jj_consume_token(BY);
      partitionList = IdentifierSegment();
      break;
    default:
      jj_la1[42] = jj_gen;
          partitionList = null;
    }
    if (jj_2_19(2147483647)) {
      orderList = OrderBy();
    } else {
          orderList = null;
    }
    jj_consume_token(RPAREN);
    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression CaseExpression() throws ParseException {
  Expression caseIdentifier;
  CaseExpression caseExpression = new CaseExpression();
  WhenClause whenClause =null;
  List<WhenClause> whenClauses = new ArrayList();
    jj_consume_token(CASE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case AVG:
    case BIT_AND:
    case BIT_OR:
    case BIT_XOR:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case EXISTS:
    case MAX:
    case MIN:
    case NOT:
    case NULL:
    case STD:
    case STDDEV_SAMP:
    case SUM:
    case VAR_SAMP:
    case VARIANCE:
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
    case BINARY_STRING_LITERAL:
    case QUOTED_STRING:
    case QUOTED_STRING_LITERAL:
    case QUOTED_STRING_LITERAL2:
    case LPAREN:
    case PLUS:
    case MINUS:
    case BACK_QUOTED_IDENTIFIER:
    case QUOTED_IDENTIFIER:
    case BRACKET_QUOTED_IDENTIFIER:
    case IDENTIFIER:
      caseIdentifier = SelectExpression();
                        caseExpression.setSwitchExpression(caseIdentifier);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    label_11:
    while (true) {
      jj_consume_token(WHEN);
      caseIdentifier = SelectExpression();
                        whenClause = new  WhenClause();
                        whenClause.setWhenExpression(caseIdentifier);
      jj_consume_token(THEN);
      caseIdentifier = SelectExpression();
          whenClause.setThenExpression(caseIdentifier);
          whenClauses.add(whenClause);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_11;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      caseIdentifier = SelectExpression();
                        caseExpression.setElseExpression(caseIdentifier);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    jj_consume_token(END);
      caseExpression.setWhenClauses(whenClauses);
      {if (true) return caseExpression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BinaryRowOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
           {if (true) return BinaryOperators.EQUALS;}
      break;
    case EQ2:
      jj_consume_token(EQ2);
            {if (true) return BinaryOperators.EQ2;}
      break;
    case AND:
      jj_consume_token(AND);
            {if (true) return BinaryOperators.AND;}
      break;
    case OR:
      jj_consume_token(OR);
           {if (true) return BinaryOperators.OR;}
      break;
    case GT:
      jj_consume_token(GT);
           {if (true) return BinaryOperators.GT;}
      break;
    case LT:
      jj_consume_token(LT);
           {if (true) return BinaryOperators.LT;}
      break;
    case LE:
      jj_consume_token(LE);
           {if (true) return BinaryOperators.LE;}
      break;
    case GE:
      jj_consume_token(GE);
           {if (true) return BinaryOperators.GE;}
      break;
    case NE:
      jj_consume_token(NE);
           {if (true) return BinaryOperators.NE;}
      break;
    case NE2:
      jj_consume_token(NE2);
            {if (true) return BinaryOperators.NE2;}
      break;
    case PLUS:
      jj_consume_token(PLUS);
             {if (true) return BinaryOperators.PLUS;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return BinaryOperators.MINUS;}
      break;
    case STAR:
      jj_consume_token(STAR);
             {if (true) return BinaryOperators.MULTIPLY;}
      break;
    case SLASH:
      jj_consume_token(SLASH);
              {if (true) return BinaryOperators.DIVIDE;}
      break;
    case PERCENT_REMAINDER:
      jj_consume_token(PERCENT_REMAINDER);
                          {if (true) return BinaryOperators.MOD;}
      break;
    default:
      jj_la1[46] = jj_gen;
      if (jj_2_20(2)) {
        jj_consume_token(IS);
                            {if (true) return BinaryOperators.EQUALS;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REGEXP:
          jj_consume_token(REGEXP);
                {if (true) return BinaryOperators.EQUALS;}
          break;
        case LIKE:
          jj_consume_token(LIKE);
              {if (true) return BinaryOperators.LIKE;}
          break;
        default:
          jj_la1[47] = jj_gen;
          if (jj_2_21(2)) {
            jj_consume_token(NOT);
            jj_consume_token(LIKE);
                                  {if (true) return BinaryOperators.NOT_LIKE;}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IS:
              jj_consume_token(IS);
              jj_consume_token(NOT);
                     {if (true) return BinaryOperators.IS_NOT;}
              break;
            case IN:
              jj_consume_token(IN);
         {if (true) return BinaryOperators.IN;}
              break;
            default:
              jj_la1[48] = jj_gen;
              if (jj_2_22(2)) {
                jj_consume_token(NOT);
                jj_consume_token(IN);
                            {if (true) return BinaryOperators.NOT_IN;}
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression BuiltinFunctionCall() throws ParseException {
                                   Expression e=null,dt=null;String func=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CAST:
      jj_consume_token(CAST);
      jj_consume_token(LPAREN);
      e = SelectExpression();

      jj_consume_token(AS);
      dt = DataType();
      jj_consume_token(RPAREN);
          CastExpression cast = new CastExpression();
                  cast.setLeftExpression(e);
          cast.setType(dt);
          {if (true) return cast;}
      break;
    case CONVERT:
      jj_consume_token(CONVERT);
      jj_consume_token(LPAREN);
      e = SelectExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        dt = DataType();
        break;
      case USING:
        jj_consume_token(USING);
        IdentifierSegment();
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
         Function function = new Function();
         ExpressionList args = new ExpressionList();
         function.setName("convert");
         args.addExpression(e);
         args.addExpression(dt);
         function.setParameters(args);
            {if (true) return function;}
      break;
    case SUM:
      jj_consume_token(SUM);
                   func="SUM";
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        jj_consume_token(DISTINCT);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      e = SelectExpression();
      jj_consume_token(RPAREN);
      break;
    case AVG:
      jj_consume_token(AVG);
                     func="AVG";
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        jj_consume_token(DISTINCT);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      e = SelectExpression();
      jj_consume_token(RPAREN);
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      e = SelectExpression();
      jj_consume_token(RPAREN);
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      e = SelectExpression();
      jj_consume_token(RPAREN);
      break;
    case BIT_XOR:
      jj_consume_token(BIT_XOR);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      e = SelectExpression();
      jj_consume_token(RPAREN);
      break;
    case COUNT:
      jj_consume_token(COUNT);
                   func="COUNT";
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        jj_consume_token(DISTINCT);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
      case AVG:
      case BIT_AND:
      case BIT_OR:
      case BIT_XOR:
      case CASE:
      case CAST:
      case CONVERT:
      case COUNT:
      case EXISTS:
      case MAX:
      case MIN:
      case NOT:
      case NULL:
      case STD:
      case STDDEV_SAMP:
      case SUM:
      case VAR_SAMP:
      case VARIANCE:
      case UNSIGNED_INTEGER_LITERAL:
      case APPROX_NUMERIC_LITERAL:
      case DECIMAL_NUMERIC_LITERAL:
      case BINARY_STRING_LITERAL:
      case QUOTED_STRING:
      case QUOTED_STRING_LITERAL:
      case QUOTED_STRING_LITERAL2:
      case LPAREN:
      case PLUS:
      case MINUS:
      case BACK_QUOTED_IDENTIFIER:
      case QUOTED_IDENTIFIER:
      case BRACKET_QUOTED_IDENTIFIER:
      case IDENTIFIER:
        e = SelectExpression();
        break;
      case STAR:
        jj_consume_token(STAR);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
      break;
    case MIN:
      jj_consume_token(MIN);
                   func="MIN";
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        jj_consume_token(DISTINCT);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      e = SelectExpression();
      jj_consume_token(RPAREN);
      break;
    case MAX:
      jj_consume_token(MAX);
                   func="MAX";
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        jj_consume_token(DISTINCT);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      e = SelectExpression();
      jj_consume_token(RPAREN);
      break;
    case STD:
      jj_consume_token(STD);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      e = SelectExpression();
      jj_consume_token(RPAREN);
      break;
    case VARIANCE:
      jj_consume_token(VARIANCE);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      e = SelectExpression();
      jj_consume_token(RPAREN);
      break;
    case STDDEV_SAMP:
      jj_consume_token(STDDEV_SAMP);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      e = SelectExpression();
      jj_consume_token(RPAREN);
      break;
    case VAR_SAMP:
      jj_consume_token(VAR_SAMP);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      e = SelectExpression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         Function function = new Function();
         ExpressionList args = new ExpressionList();
         function.setName(func);
         args.addExpression(e);
         function.setParameters(args);
            {if (true) return function;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Args() throws ParseException {
ExpressionList args = new ExpressionList();
Expression tmp ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case AVG:
    case BIT_AND:
    case BIT_OR:
    case BIT_XOR:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case EXISTS:
    case MAX:
    case MIN:
    case NOT:
    case NULL:
    case STD:
    case STDDEV_SAMP:
    case SUM:
    case VAR_SAMP:
    case VARIANCE:
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
    case BINARY_STRING_LITERAL:
    case QUOTED_STRING:
    case QUOTED_STRING_LITERAL:
    case QUOTED_STRING_LITERAL2:
    case LPAREN:
    case PLUS:
    case MINUS:
    case BACK_QUOTED_IDENTIFIER:
    case QUOTED_IDENTIFIER:
    case BRACKET_QUOTED_IDENTIFIER:
    case IDENTIFIER:
      tmp = Arg();
                              args.addExpression(tmp);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        tmp = Arg();
                           args.addExpression(tmp);
      }
         {if (true) return args;}
      break;
    default:
      jj_la1[70] = jj_gen;
    {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression Arg() throws ParseException {
    Expression e = null;
    e = SelectExpression();
         {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression DataType() throws ParseException {
                        Expression typeName;
    typeName = TypeName();
                {if (true) return typeName;}
    throw new Error("Missing return statement in function");
  }

  final public Expression TypeName() throws ParseException {
   Expression typeNameSpec;
    if (jj_2_23(2)) {
      typeNameSpec = SqlTypeName();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BINARY_STRING_LITERAL:
      case QUOTED_STRING:
      case QUOTED_STRING_LITERAL:
      case QUOTED_STRING_LITERAL2:
      case BACK_QUOTED_IDENTIFIER:
      case QUOTED_IDENTIFIER:
      case BRACKET_QUOTED_IDENTIFIER:
      case IDENTIFIER:
        typeNameSpec = CompoundIdentifier();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return typeNameSpec;}
    throw new Error("Missing return statement in function");
  }

  final public Expression SqlTypeName() throws ParseException {
    final String sqlTypeNameSpec;
    sqlTypeNameSpec = SqlTypeName1();
        {if (true) return new StringValue(sqlTypeNameSpec);}
    throw new Error("Missing return statement in function");
  }

  final public String SqlTypeName1() throws ParseException {
    final String sqlTypeName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GEOMETRY:
      jj_consume_token(GEOMETRY);
            sqlTypeName = "GEOMETRY";
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                    sqlTypeName = "BOOLEAN";
      break;
    case INT:
    case INTEGER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                sqlTypeName = "INTEGER";
      break;
    case TINYINT:
      jj_consume_token(TINYINT);
                    sqlTypeName = "TINYINT";
      break;
    case SMALLINT:
      jj_consume_token(SMALLINT);
                     sqlTypeName = "SMALLINT";
      break;
    case BIGINT:
      jj_consume_token(BIGINT);
                   sqlTypeName = "BIGINT";
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
                   sqlTypeName = "DOUBLE";
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                  sqlTypeName = "FLOAT";
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return sqlTypeName;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrefixRowOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
             {if (true) return BinaryOperators.PRE_OP_PLUS;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return BinaryOperators.PRE_OP_MINUS;}
      break;
    case NOT:
      jj_consume_token(NOT);
            {if (true) return BinaryOperators.PRE_OP_NOT;}
      break;
    case EXISTS:
      jj_consume_token(EXISTS);
               {if (true) return BinaryOperators.PRE_OP_EXISTS;}
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parses a compound identifier.
 */
  final public Expression CompoundIdentifier() throws ParseException {
        ExpressionList parts = new ExpressionList();
        Expression item=null;
        boolean star = false;
    item = IdentifierSegment();
                parts.addExpression(item);
    label_13:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(DOT);
      item = IdentifierSegment();
                        parts.addExpression(item);
    }
    if (jj_2_25(2)) {
      jj_consume_token(DOT);
      jj_consume_token(STAR);
             star = true;
    } else {
      ;
    }
      if(star) {
                 {if (true) return new AllTableColumns(parts);}
      } else {
        Field field = new Field();
        field.addPartItems(parts);
                {if (true) return field;}
      }
    throw new Error("Missing return statement in function");
  }

  final public Expression FunctionName() throws ParseException {
  ExpressionList items = new ExpressionList();
  Expression item;
    item = IdentifierSegment();
        items.addExpression(item);
    label_14:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(DOT);
      item = IdentifierSegment();
                         items.addExpression(item);
    }
      {if (true) return items;}
    throw new Error("Missing return statement in function");
  }

  final public void SqlAlterStmt() throws ParseException {
    jj_consume_token(ALTER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCE:
      SqlAlterInstance();
      break;
    case RESOURCE:
      SqlAlterResourceGroup();
      break;
    case TABLE:
      SqlAlterTable();
      break;
    case DATABASE:
      SqlAlterDatabase();
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SqlAlterDatabase() throws ParseException {
  Expression database;
    jj_consume_token(DATABASE);
    database = Identifier();
    createDatabaseOptions();
  }

  final public void createDatabaseOptions() throws ParseException {
    label_15:
    while (true) {
      createDatabaseOption();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER:
      case COLLATE:
      case DEFAULT_:
      case ENCRYPTION:
      case READ:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_15;
      }
    }
  }

  final public void createDatabaseOption() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHARACTER:
    case COLLATE:
    case DEFAULT_:
    case ENCRYPTION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULT_:
        jj_consume_token(DEFAULT_);
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER:
        jj_consume_token(CHARACTER);
        jj_consume_token(SET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
          break;
        default:
          jj_la1[78] = jj_gen;
          ;
        }
        IdentifierSegment();
        break;
      case COLLATE:
        jj_consume_token(COLLATE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
          break;
        default:
          jj_la1[79] = jj_gen;
          ;
        }
        IdentifierSegment();
        break;
      case ENCRYPTION:
        jj_consume_token(ENCRYPTION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
          break;
        default:
          jj_la1[80] = jj_gen;
          ;
        }
        IdentifierSegment();
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case READ:
      jj_consume_token(READ);
      jj_consume_token(ONLY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      IdentifierSegment();
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SqlAlterTable() throws ParseException {
        Expression tableName;
        Expression algorithm;
    jj_consume_token(TABLE);
    tableName = Identifier();
                                   tableName=new StringValue(getToken(0).image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALGORITHM:
      jj_consume_token(ALGORITHM);
      jj_consume_token(EQ);
      jj_consume_token(IDENTIFIER);
                                                   algorithm=new StringValue(getToken(0).image);
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
  }

  final public void SqlAlterResourceGroup() throws ParseException {
  String groupName ="";
    jj_consume_token(RESOURCE);
    jj_consume_token(GROUP);
    jj_consume_token(IDENTIFIER);
                                     groupName=getToken(0).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VCPU:
      jj_consume_token(VCPU);
      jj_consume_token(EQ);
      if (jj_2_27(2147483647)) {
        jj_consume_token(UNSIGNED_INTEGER_LITERAL);
        jj_consume_token(MINUS);
        jj_consume_token(UNSIGNED_INTEGER_LITERAL);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNSIGNED_INTEGER_LITERAL:
          jj_consume_token(UNSIGNED_INTEGER_LITERAL);
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case THREAD_PRIORITY:
      jj_consume_token(THREAD_PRIORITY);
      jj_consume_token(EQ);
      jj_consume_token(UNSIGNED_INTEGER_LITERAL);
      break;
    case DISABLE:
      jj_consume_token(DISABLE);
      jj_consume_token(FORCE);
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Parses an expression for setting or resetting an option in SQL, such as QUOTED_IDENTIFIERS,
 * or explain plan level (physical/logical).
 */
  final public void SqlAlterInstance() throws ParseException {
    final String scope;
    jj_consume_token(INSTANCE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ROTATE:
      jj_consume_token(ROTATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INNODB:
        jj_consume_token(INNODB);

        break;
      case BINLOG:
        jj_consume_token(BINLOG);

        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(MASTER);
      jj_consume_token(KEY);
      break;
    case RELOAD:
      jj_consume_token(RELOAD);
      jj_consume_token(TLS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NO:
        jj_consume_token(NO);
        jj_consume_token(ROLLBACK);
        jj_consume_token(ON);
        jj_consume_token(ERROR);
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String JoinType() throws ParseException {
    String joinType="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JOIN:
      jj_consume_token(JOIN);
                 joinType = "INNER";
      break;
    case INNER:
      jj_consume_token(INNER);
      jj_consume_token(JOIN);
                         joinType = "INNER";
      break;
    case LEFT:
      jj_consume_token(LEFT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTER:
        jj_consume_token(OUTER);
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      jj_consume_token(JOIN);
                                    joinType = "LEFT";
      break;
    case RIGHT:
      jj_consume_token(RIGHT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTER:
        jj_consume_token(OUTER);
        break;
      default:
        jj_la1[91] = jj_gen;
        ;
      }
      jj_consume_token(JOIN);
                                     joinType = "RIGHT";
      break;
    case FULL:
      jj_consume_token(FULL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTER:
        jj_consume_token(OUTER);
        break;
      default:
        jj_la1[92] = jj_gen;
        ;
      }
      jj_consume_token(JOIN);
                                    joinType = "FULL";
      break;
    case CROSS:
      jj_consume_token(CROSS);
      jj_consume_token(JOIN);
                         joinType = "CROSS";
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return joinType;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parses "SET &lt;NAME&gt; = VALUE" or "RESET &lt;NAME&gt;", without a leading
 * "ALTER &lt;SCOPE&gt;".
 */
  final public void SqlSetOption(String scope) throws ParseException {
    Expression name;
    Expression val;
    List s = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SET:
      jj_consume_token(SET);
            s.add(this);
      name = CompoundIdentifier();
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case UNSIGNED_INTEGER_LITERAL:
      case APPROX_NUMERIC_LITERAL:
      case DECIMAL_NUMERIC_LITERAL:
      case BINARY_STRING_LITERAL:
      case QUOTED_STRING:
      case QUOTED_STRING_LITERAL:
      case QUOTED_STRING_LITERAL2:
      case PLUS:
      case MINUS:
      case BACK_QUOTED_IDENTIFIER:
      case QUOTED_IDENTIFIER:
      case BRACKET_QUOTED_IDENTIFIER:
      case IDENTIFIER:
        val = Literal();
        break;
      case ON:
        jj_consume_token(ON);
                // OFF is handled by SimpleIdentifier, ON handled here.
                val = new StringValue(token.image);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            {if (true) return ;}
      break;
    case RESET:
      jj_consume_token(RESET);
            s.add(this);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BINARY_STRING_LITERAL:
      case QUOTED_STRING:
      case QUOTED_STRING_LITERAL:
      case QUOTED_STRING_LITERAL2:
      case BACK_QUOTED_IDENTIFIER:
      case QUOTED_IDENTIFIER:
      case BRACKET_QUOTED_IDENTIFIER:
      case IDENTIFIER:
        name = CompoundIdentifier();
        break;
      case ALL:
        jj_consume_token(ALL);
                name =new StringValue(token.image.toUpperCase());
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            {if (true) return ;}
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Expression Literal() throws ParseException {
    Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
    case PLUS:
    case MINUS:
      e = NumericLiteral();
      break;
    case BINARY_STRING_LITERAL:
    case QUOTED_STRING:
    case QUOTED_STRING_LITERAL:
    case QUOTED_STRING_LITERAL2:
    case BACK_QUOTED_IDENTIFIER:
    case QUOTED_IDENTIFIER:
    case BRACKET_QUOTED_IDENTIFIER:
    case IDENTIFIER:
      e = IdentifierSegment();
      break;
    case NULL:
      e = NullLiteral();
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NullLiteral() throws ParseException {
    jj_consume_token(NULL);
             {if (true) return new NullValue();}
    throw new Error("Missing return statement in function");
  }

/** Parses a numeric literal (can be signed) */
  final public Expression NumericLiteral() throws ParseException {
    final Expression num;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      num = UnsignedNumericLiteral();
        {if (true) return num;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      num = UnsignedNumericLiteral();
        {if (true) return num;}
      break;
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
      num = UnsignedNumericLiteral();
        {if (true) return num;}
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Parses a unsigned numeric literal */
  final public LongValue UnsignedNumericLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_INTEGER_LITERAL:
      jj_consume_token(UNSIGNED_INTEGER_LITERAL);
      break;
    case DECIMAL_NUMERIC_LITERAL:
      jj_consume_token(DECIMAL_NUMERIC_LITERAL);
      break;
    case APPROX_NUMERIC_LITERAL:
      jj_consume_token(APPROX_NUMERIC_LITERAL);
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return new LongValue(token.image);}
    throw new Error("Missing return statement in function");
  }

  final public String Scope() throws ParseException {
    final String num;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYSTEM:
      jj_consume_token(SYSTEM);
                  {if (true) return token.image.toUpperCase();}
      break;
    case SESSION:
      jj_consume_token(SESSION);
                   {if (true) return token.image.toUpperCase();}
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression Identifier() throws ParseException {
    final List<String> names = new ArrayList<String>();
    Expression iden;
    iden = IdentifierSegment();
     {if (true) return iden;}
    throw new Error("Missing return statement in function");
  }

  final public Expression IdentifierSegment() throws ParseException {
    final String id;
    char unicodeEscapeChar = BACKSLASH;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case QUOTED_IDENTIFIER:
      jj_consume_token(QUOTED_IDENTIFIER);
      break;
    case QUOTED_STRING:
      jj_consume_token(QUOTED_STRING);
      break;
    case BRACKET_QUOTED_IDENTIFIER:
      jj_consume_token(BRACKET_QUOTED_IDENTIFIER);
      break;
    case BACK_QUOTED_IDENTIFIER:
      jj_consume_token(BACK_QUOTED_IDENTIFIER);
      break;
    case QUOTED_STRING_LITERAL:
      jj_consume_token(QUOTED_STRING_LITERAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLLATE:
        jj_consume_token(COLLATE);
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[101] = jj_gen;
        ;
      }
      break;
    case QUOTED_STRING_LITERAL2:
      jj_consume_token(QUOTED_STRING_LITERAL2);
      break;
    case BINARY_STRING_LITERAL:
      jj_consume_token(BINARY_STRING_LITERAL);
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                {if (true) return new StringValue(getToken(0).image);}
    throw new Error("Missing return statement in function");
  }

  String unquotedIdentifier() throws ParseException {
    return "unquotedIdentifier";
  }

  final public void UnusedExtension() throws ParseException {
    if (false) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ZONE);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_80()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(2)) jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(NATURAL)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(COLLATE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(BIGINT)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(OFFSET)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(SMALLINT)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(TINYINT)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_39()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(GEOMETRY)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(LIMIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(QUOTED_STRING_LITERAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(VAR_SAMP)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(STDDEV_SAMP)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(VARIANCE)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(STD)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(BIT_XOR)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(AVG)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(CONVERT)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(CAST)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(REGEXP)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(PERCENT_REMAINDER)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(CROSS)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(FULL)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(NE2)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(RIGHT)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(LEFT)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(INNER)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(JOIN)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(EQ2)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(UNSIGNED_INTEGER_LITERAL)) return true;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(ORDER)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SqlParserImplTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[103];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x20000000,0x0,0x80,0x0,0x10000000,0x10000000,0x0,0x80,0x0,0x0,0x800000,0x8,0x8,0x0,0x8,0x8,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x2,0x2,0x2,0x8,0x8,0x667104,0x667104,0x202,0x0,0x0,0x4,0x667104,0x667104,0x0,0x647100,0x20000,0x0,0x0,0x0,0x667104,0x0,0x80000000,0x2,0x0,0x0,0x0,0x10000000,0x80,0x10000000,0x80,0x80,0x80,0x80,0x10000000,0x80,0x667104,0x10000000,0x80,0x10000000,0x80,0x80,0x80,0x80,0x80,0x647100,0x0,0x667104,0x0,0x0,0x40008400,0x0,0x1000000,0x2180000,0x2000000,0x0,0x0,0x0,0x180000,0x0,0x2180000,0x20,0x0,0x8000000,0x800,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x20,0x90141040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x200,0x0,0x800,0x0,0x0,0x0,0x0,0x60000004,0x60000004,0x20800,0x80000000,0x4,0x0,0x60000000,0x60000004,0x0,0x60000000,0x0,0x0,0x0,0x0,0x60000004,0x0,0x0,0x0,0x0,0x20800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000004,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x0,0x60000004,0x0,0x18000,0x18088,0x4,0x8004000,0x1000001,0x0,0x0,0x0,0x0,0x1,0x0,0x1000001,0x0,0x0,0x0,0x2000,0x0,0x2000000,0x0,0x0,0x0,0x10141040,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2000,0x0,0x0,0x0,0x2000,0x3f00000,0x3f00000,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x20080,0x20080,0x0,0x0,0x0,0x0,0x42,0x40,0x40,0x0,0x0,0x40c0006,0x40c0006,0x42,0x0,0x2,0x0,0x40c0004,0x40c0006,0x0,0x40c0000,0x4,0x200,0x0,0x400,0x40c0006,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40c0006,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40c0000,0x0,0x40c0006,0x0,0x0,0x40010000,0x2,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1000,0x100,0x100,0x100,0x0,0x14,0x0,0x8000,0x4,0x0,0x0,0x8004000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x800000,0x0,0x2,0x0,0x800000,0x0,0x0,0x0,0x0,0xe00,0x0,0x0,0x0,0x78000,0x0,0x0,0x0,0x878000,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x78000,0x878e18,0x878e18,0x0,0x0,0x0,0x0,0x878e18,0x878e18,0x0,0x18,0x78e00,0x0,0x78000,0x0,0x878e18,0x40,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x878e18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x0,0x878e18,0x78000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x21,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78e00,0x78000,0x0,0x78e00,0xe00,0xe00,0x0,0x0,0x78000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x80,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x34000,0x14080,0x200ffe70,0x0,0x14000,0x0,0x14000,0x14000,0x8,0x0,0x14000,0x0,0x0,0x0,0x14000,0x0,0x0,0xfde70,0x20002000,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x34000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x14000,0x0,0x0,0x0,0x14000,0x0,0x0,0x0,0x10,0x10,0x10,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14000,0x0,0x0,0x14000,0x14000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5c00,0x0,0x0,0x0,0x5c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5c00,0x5c00,0x5c00,0x0,0x0,0x0,0x0,0x5c00,0x5c00,0x0,0x0,0x5c00,0x0,0x5c00,0x0,0x5c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5c00,0x5c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5c00,0x5c00,0x0,0x5c00,0x0,0x0,0x0,0x0,0x5c00,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[27];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SqlParserImpl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SqlParserImpl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SqlParserImpl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SqlParserImpl(SqlParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SqlParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[179];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 103; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 179; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 27; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
