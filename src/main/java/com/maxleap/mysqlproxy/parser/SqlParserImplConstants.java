/* Generated By:JavaCC: Do not edit this line. SqlParserImplConstants.java */
package com.maxleap.mysqlproxy.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SqlParserImplConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AND = 1;
  /** RegularExpression Id. */
  int ANY = 2;
  /** RegularExpression Id. */
  int AS = 3;
  /** RegularExpression Id. */
  int ASC = 4;
  /** RegularExpression Id. */
  int ALGORITHM = 5;
  /** RegularExpression Id. */
  int ALTER = 6;
  /** RegularExpression Id. */
  int ALL = 7;
  /** RegularExpression Id. */
  int AVG = 8;
  /** RegularExpression Id. */
  int BETWEEN = 9;
  /** RegularExpression Id. */
  int BIGINT = 10;
  /** RegularExpression Id. */
  int BINLOG = 11;
  /** RegularExpression Id. */
  int BIT_AND = 12;
  /** RegularExpression Id. */
  int BIT_OR = 13;
  /** RegularExpression Id. */
  int BIT_XOR = 14;
  /** RegularExpression Id. */
  int BOOLEAN = 15;
  /** RegularExpression Id. */
  int BY = 16;
  /** RegularExpression Id. */
  int CASE = 17;
  /** RegularExpression Id. */
  int CAST = 18;
  /** RegularExpression Id. */
  int CHARACTER = 19;
  /** RegularExpression Id. */
  int COLLATE = 20;
  /** RegularExpression Id. */
  int CONVERT = 21;
  /** RegularExpression Id. */
  int COUNT = 22;
  /** RegularExpression Id. */
  int CROSS = 23;
  /** RegularExpression Id. */
  int DATABASE = 24;
  /** RegularExpression Id. */
  int DEFAULT_ = 25;
  /** RegularExpression Id. */
  int DESC = 26;
  /** RegularExpression Id. */
  int DISABLE = 27;
  /** RegularExpression Id. */
  int DISTINCT = 28;
  /** RegularExpression Id. */
  int DISTRIBUTE = 29;
  /** RegularExpression Id. */
  int DOUBLE = 30;
  /** RegularExpression Id. */
  int ELSE = 31;
  /** RegularExpression Id. */
  int ENCRYPTION = 32;
  /** RegularExpression Id. */
  int END = 33;
  /** RegularExpression Id. */
  int EXISTS = 34;
  /** RegularExpression Id. */
  int FLOAT = 35;
  /** RegularExpression Id. */
  int FORCE = 36;
  /** RegularExpression Id. */
  int FROM = 37;
  /** RegularExpression Id. */
  int FULL = 38;
  /** RegularExpression Id. */
  int GEOMETRY = 39;
  /** RegularExpression Id. */
  int GROUP = 40;
  /** RegularExpression Id. */
  int HAVING = 41;
  /** RegularExpression Id. */
  int HIGH_PRIORITY = 42;
  /** RegularExpression Id. */
  int IN = 43;
  /** RegularExpression Id. */
  int INNER = 44;
  /** RegularExpression Id. */
  int INNODB = 45;
  /** RegularExpression Id. */
  int INSTANCE = 46;
  /** RegularExpression Id. */
  int INT = 47;
  /** RegularExpression Id. */
  int INTEGER = 48;
  /** RegularExpression Id. */
  int IS = 49;
  /** RegularExpression Id. */
  int JOIN = 50;
  /** RegularExpression Id. */
  int KEY = 51;
  /** RegularExpression Id. */
  int LEFT = 52;
  /** RegularExpression Id. */
  int LIMIT = 53;
  /** RegularExpression Id. */
  int ERROR = 54;
  /** RegularExpression Id. */
  int MASTER = 55;
  /** RegularExpression Id. */
  int READ = 56;
  /** RegularExpression Id. */
  int RELOAD = 57;
  /** RegularExpression Id. */
  int RESET = 58;
  /** RegularExpression Id. */
  int RESOURCE = 59;
  /** RegularExpression Id. */
  int RIGHT = 60;
  /** RegularExpression Id. */
  int MAX = 61;
  /** RegularExpression Id. */
  int MIN = 62;
  /** RegularExpression Id. */
  int NATURAL = 63;
  /** RegularExpression Id. */
  int NO = 64;
  /** RegularExpression Id. */
  int NOT = 65;
  /** RegularExpression Id. */
  int NULL = 66;
  /** RegularExpression Id. */
  int OFFSET = 67;
  /** RegularExpression Id. */
  int ON = 68;
  /** RegularExpression Id. */
  int ONLY = 69;
  /** RegularExpression Id. */
  int OR = 70;
  /** RegularExpression Id. */
  int ORDER = 71;
  /** RegularExpression Id. */
  int OUTER = 72;
  /** RegularExpression Id. */
  int OVER = 73;
  /** RegularExpression Id. */
  int PARTITION = 74;
  /** RegularExpression Id. */
  int ROLLBACK = 75;
  /** RegularExpression Id. */
  int ROTATE = 76;
  /** RegularExpression Id. */
  int SELECT = 77;
  /** RegularExpression Id. */
  int SESSION = 78;
  /** RegularExpression Id. */
  int SET = 79;
  /** RegularExpression Id. */
  int SMALLINT = 80;
  /** RegularExpression Id. */
  int SORT = 81;
  /** RegularExpression Id. */
  int STD = 82;
  /** RegularExpression Id. */
  int STDDEV_SAMP = 83;
  /** RegularExpression Id. */
  int STRAIGHT_JOIN = 84;
  /** RegularExpression Id. */
  int SQL_BIG_RESULT = 85;
  /** RegularExpression Id. */
  int SQL_BUFFER_RESULT = 86;
  /** RegularExpression Id. */
  int SQL_CALC_FOUND_ROWS = 87;
  /** RegularExpression Id. */
  int SQL_NO_CACHE = 88;
  /** RegularExpression Id. */
  int SQL_SMALL_RESULT = 89;
  /** RegularExpression Id. */
  int SUM = 90;
  /** RegularExpression Id. */
  int SYSTEM = 91;
  /** RegularExpression Id. */
  int TABLE = 92;
  /** RegularExpression Id. */
  int THEN = 93;
  /** RegularExpression Id. */
  int TINYINT = 94;
  /** RegularExpression Id. */
  int TLS = 95;
  /** RegularExpression Id. */
  int THREAD_PRIORITY = 96;
  /** RegularExpression Id. */
  int UNION = 97;
  /** RegularExpression Id. */
  int USING = 98;
  /** RegularExpression Id. */
  int VAR_SAMP = 99;
  /** RegularExpression Id. */
  int VARIANCE = 100;
  /** RegularExpression Id. */
  int VCPU = 101;
  /** RegularExpression Id. */
  int WHEN = 102;
  /** RegularExpression Id. */
  int WHERE = 103;
  /** RegularExpression Id. */
  int ZONE = 104;
  /** RegularExpression Id. */
  int UNSIGNED_INTEGER_LITERAL = 105;
  /** RegularExpression Id. */
  int APPROX_NUMERIC_LITERAL = 106;
  /** RegularExpression Id. */
  int DECIMAL_NUMERIC_LITERAL = 107;
  /** RegularExpression Id. */
  int EXPONENT = 108;
  /** RegularExpression Id. */
  int HEXDIGIT = 109;
  /** RegularExpression Id. */
  int WHITESPACE = 110;
  /** RegularExpression Id. */
  int BINARY_STRING_LITERAL = 111;
  /** RegularExpression Id. */
  int QUOTED_STRING = 112;
  /** RegularExpression Id. */
  int QUOTED_STRING_LITERAL = 113;
  /** RegularExpression Id. */
  int QUOTED_STRING_LITERAL2 = 114;
  /** RegularExpression Id. */
  int UNICODE_STRING_LITERAL = 115;
  /** RegularExpression Id. */
  int CHARSETNAME = 116;
  /** RegularExpression Id. */
  int HEX_LITERAL = 117;
  /** RegularExpression Id. */
  int UNICODE_QUOTED_ESCAPE_CHAR = 118;
  /** RegularExpression Id. */
  int LPAREN = 119;
  /** RegularExpression Id. */
  int RPAREN = 120;
  /** RegularExpression Id. */
  int LBRACE_D = 121;
  /** RegularExpression Id. */
  int LBRACE_T = 122;
  /** RegularExpression Id. */
  int LBRACE_TS = 123;
  /** RegularExpression Id. */
  int LBRACE_FN = 124;
  /** RegularExpression Id. */
  int LBRACE = 125;
  /** RegularExpression Id. */
  int RBRACE = 126;
  /** RegularExpression Id. */
  int LBRACKET = 127;
  /** RegularExpression Id. */
  int RBRACKET = 128;
  /** RegularExpression Id. */
  int SEMICOLON = 129;
  /** RegularExpression Id. */
  int DOT = 130;
  /** RegularExpression Id. */
  int COMMA = 131;
  /** RegularExpression Id. */
  int EQ = 132;
  /** RegularExpression Id. */
  int GT = 133;
  /** RegularExpression Id. */
  int LT = 134;
  /** RegularExpression Id. */
  int HOOK = 135;
  /** RegularExpression Id. */
  int COLON = 136;
  /** RegularExpression Id. */
  int LE = 137;
  /** RegularExpression Id. */
  int GE = 138;
  /** RegularExpression Id. */
  int NE = 139;
  /** RegularExpression Id. */
  int NE2 = 140;
  /** RegularExpression Id. */
  int LIKE = 141;
  /** RegularExpression Id. */
  int PLUS = 142;
  /** RegularExpression Id. */
  int EQ2 = 143;
  /** RegularExpression Id. */
  int MINUS = 144;
  /** RegularExpression Id. */
  int STAR = 145;
  /** RegularExpression Id. */
  int SLASH = 146;
  /** RegularExpression Id. */
  int PERCENT_REMAINDER = 147;
  /** RegularExpression Id. */
  int CONCAT = 148;
  /** RegularExpression Id. */
  int NAMED_ARGUMENT_ASSIGNMENT = 149;
  /** RegularExpression Id. */
  int DOUBLE_PERIOD = 150;
  /** RegularExpression Id. */
  int QUOTE = 151;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE = 152;
  /** RegularExpression Id. */
  int BACK_QUOTE = 153;
  /** RegularExpression Id. */
  int VERTICAL_BAR = 154;
  /** RegularExpression Id. */
  int CARET = 155;
  /** RegularExpression Id. */
  int DOLLAR = 156;
  /** RegularExpression Id. */
  int REGEXP = 157;
  /** RegularExpression Id. */
  int LN = 158;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 166;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 167;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 168;
  /** RegularExpression Id. */
  int BACK_QUOTED_IDENTIFIER = 170;
  /** RegularExpression Id. */
  int QUOTED_IDENTIFIER = 171;
  /** RegularExpression Id. */
  int BRACKET_QUOTED_IDENTIFIER = 172;
  /** RegularExpression Id. */
  int COLLATION_ID = 173;
  /** RegularExpression Id. */
  int IDENTIFIER = 174;
  /** RegularExpression Id. */
  int UNICODE_QUOTED_IDENTIFIER = 175;
  /** RegularExpression Id. */
  int LETTER = 176;
  /** RegularExpression Id. */
  int DIGIT = 177;
  /** RegularExpression Id. */
  int BEL = 178;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int DQID = 1;
  /** Lexical state. */
  int BTID = 2;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 3;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"AND\"",
    "\"ANY\"",
    "\"AS\"",
    "\"ASC\"",
    "\"ALGORITHM\"",
    "\"ALTER\"",
    "\"ALL\"",
    "\"AVG\"",
    "\"BETWEEN\"",
    "\"BIGINT\"",
    "\"BINLOG\"",
    "\"BIT_AND\"",
    "\"BIT_OR\"",
    "\"BIT_XOR\"",
    "\"BOOLEAN\"",
    "\"BY\"",
    "\"CASE\"",
    "\"CAST\"",
    "\"CHARACTER\"",
    "\"COLLATE\"",
    "\"CONVERT\"",
    "\"COUNT\"",
    "\"CROSS\"",
    "\"DATABASE\"",
    "\"DEFAULT\"",
    "\"DESC\"",
    "\"DISABLE\"",
    "\"DISTINCT\"",
    "\"DISTRIBUTE\"",
    "\"DOUBLE\"",
    "\"ELSE\"",
    "\"ENCRYPTION\"",
    "\"END\"",
    "\"EXISTS\"",
    "\"FLOAT\"",
    "\"FORCE\"",
    "\"FROM\"",
    "\"FULL\"",
    "\"GEOMETRY\"",
    "\"GROUP\"",
    "\"HAVING\"",
    "\"HIGH_PRIORITY\"",
    "\"IN\"",
    "\"INNER\"",
    "\"INNODB\"",
    "\"INSTANCE\"",
    "\"INT\"",
    "\"INTEGER\"",
    "\"IS\"",
    "\"JOIN\"",
    "\"KEY\"",
    "\"LEFT\"",
    "\"LIMIT\"",
    "\"ERROR\"",
    "\"MASTER\"",
    "\"READ\"",
    "\"RELOAD\"",
    "\"RESET\"",
    "\"RESOURCE\"",
    "\"RIGHT\"",
    "\"MAX\"",
    "\"MIN\"",
    "\"NATURAL\"",
    "\"NO\"",
    "\"NOT\"",
    "\"NULL\"",
    "\"OFFSET\"",
    "\"ON\"",
    "\"ONLY\"",
    "\"OR\"",
    "\"ORDER\"",
    "\"OUTER\"",
    "\"OVER\"",
    "\"PARTITION\"",
    "\"ROLLBACK\"",
    "\"ROTATE\"",
    "\"SELECT\"",
    "\"SESSION\"",
    "\"SET\"",
    "\"SMALLINT\"",
    "\"SORT\"",
    "\"STD\"",
    "\"STDDEV_SAMP\"",
    "\"STRAIGHT_JOIN\"",
    "\"SQL_BIG_RESULT\"",
    "\"SQL_BUFFER_RESULT\"",
    "\"SQL_CALC_FOUND_ROWS\"",
    "\"SQL_NO_CACHE\"",
    "\"SQL_SMALL_RESULT\"",
    "\"SUM\"",
    "\"SYSTEM\"",
    "\"TABLE\"",
    "\"THEN\"",
    "\"TINYINT\"",
    "\"TLS\"",
    "\"THREAD_PRIORITY\"",
    "\"UNION\"",
    "\"USING\"",
    "\"VAR_SAMP\"",
    "\"VARIANCE\"",
    "\"VCPU\"",
    "\"WHEN\"",
    "\"WHERE\"",
    "\"ZONE\"",
    "<UNSIGNED_INTEGER_LITERAL>",
    "<APPROX_NUMERIC_LITERAL>",
    "<DECIMAL_NUMERIC_LITERAL>",
    "<EXPONENT>",
    "<HEXDIGIT>",
    "<WHITESPACE>",
    "<BINARY_STRING_LITERAL>",
    "<QUOTED_STRING>",
    "<QUOTED_STRING_LITERAL>",
    "<QUOTED_STRING_LITERAL2>",
    "<UNICODE_STRING_LITERAL>",
    "<CHARSETNAME>",
    "<HEX_LITERAL>",
    "<UNICODE_QUOTED_ESCAPE_CHAR>",
    "\"(\"",
    "\")\"",
    "<LBRACE_D>",
    "<LBRACE_T>",
    "<LBRACE_TS>",
    "<LBRACE_FN>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\".\"",
    "\",\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"?\"",
    "\":\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"!=\"",
    "\"LIKE\"",
    "\"+\"",
    "\"<=>\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"||\"",
    "\"=>\"",
    "\"..\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"`\"",
    "\"|\"",
    "\"^\"",
    "\"$\"",
    "\"REGEXP\"",
    "\"\\\\G\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 164>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 169>",
    "<BACK_QUOTED_IDENTIFIER>",
    "<QUOTED_IDENTIFIER>",
    "<BRACKET_QUOTED_IDENTIFIER>",
    "<COLLATION_ID>",
    "<IDENTIFIER>",
    "<UNICODE_QUOTED_IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<BEL>",
  };

}
