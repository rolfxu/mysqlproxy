/* Generated By:JavaCC: Do not edit this line. SqlParserImplTokenManager.java */
package com.maxleap.mysqlproxy.parser;
import com.maxleap.mysqlproxy.parser.expression.*;
import com.maxleap.mysqlproxy.parser.schema.*;
import com.maxleap.mysqlproxy.parser.statement.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.*;

/** Token Manager. */
public class SqlParserImplTokenManager implements SqlParserImplConstants
{
    List<Integer> lexicalStateStack = new ArrayList<Integer>();

    void pushState() {
      lexicalStateStack.add(curLexState);
    }

    void popState() {
      SwitchTo(lexicalStateStack.remove(lexicalStateStack.size() - 1));
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x2000000000000000L) != 0L)
            return 91;
         if ((active1 & 0x600000000L) != 0L)
         {
            jjmatchedKind = 174;
            return 63;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x7L) != 0L)
         {
            jjmatchedKind = 174;
            return 18;
         }
         if ((active2 & 0x2000040000L) != 0L)
            return 89;
         if ((active0 & 0x7ffffffffffffffeL) != 0L || (active1 & 0x1f9fffffff8L) != 0L || (active2 & 0x20002000L) != 0L)
         {
            jjmatchedKind = 174;
            return 92;
         }
         if ((active2 & 0x10000L) != 0L)
            return 29;
         if ((active2 & 0x400004L) != 0L)
            return 93;
         if ((active2 & 0x10000000L) != 0L)
            return 92;
         if ((active2 & 0x800000L) != 0L)
            return 60;
         return -1;
      case 1:
         if ((active0 & 0x3f80000010018L) != 0L || (active1 & 0xf3L) != 0L)
            return 92;
         if ((active2 & 0x2000000000L) != 0L)
            return 87;
         if ((active0 & 0xfffc07fffffeffe6L) != 0L || (active1 & 0x1ffffffff0cL) != 0L || (active2 & 0x20002000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 174;
               jjmatchedPos = 1;
            }
            return 92;
         }
         return -1;
      case 2:
         if ((active0 & 0x9ff477fdfffefe60L) != 0L || (active1 & 0x1ff7bf37facL) != 0L || (active2 & 0x20002000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 174;
               jjmatchedPos = 2;
            }
            return 92;
         }
         if ((active0 & 0x6009800200000196L) != 0L || (active1 & 0x840c8002L) != 0L)
            return 92;
         return -1;
      case 3:
         if ((active0 & 0x114006084060000L) != 0L || (active1 & 0x16020020224L) != 0L || (active2 & 0x2000L) != 0L)
            return 92;
         if ((active0 & 0x9ee1779d7bf8fe60L) != 0L || (active1 & 0x9f5bf97d88L) != 0L || (active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 3;
            return 92;
         }
         return -1;
      case 4:
         if ((active0 & 0x1460111800c00040L) != 0L || (active1 & 0x8610000180L) != 0L)
            return 92;
         if ((active0 & 0x8a8166857b38fe20L) != 0L || (active1 & 0x194bf97c08L) != 0L || (active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 4;
            return 92;
         }
         return -1;
      case 5:
         if ((active0 & 0x280220440002c00L) != 0L || (active1 & 0x8003008L) != 0L || (active2 & 0x20000000L) != 0L)
            return 92;
         if ((active0 & 0x880144813b38d220L) != 0L || (active1 & 0x1943f94c00L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 5;
            return 92;
         }
         return -1;
      case 6:
         if ((active0 & 0x800100000a30d200L) != 0L || (active1 & 0x40004000L) != 0L)
            return 92;
         if ((active0 & 0x800448131080020L) != 0L || (active1 & 0x1903f90c00L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 6;
            return 92;
         }
         return -1;
      case 7:
         if ((active0 & 0x800408011000000L) != 0L || (active1 & 0x1800010800L) != 0L)
            return 92;
         if ((active0 & 0x40120080020L) != 0L || (active1 & 0x103f80400L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 7;
            return 92;
         }
         return -1;
      case 8:
         if ((active0 & 0x80020L) != 0L || (active1 & 0x400L) != 0L)
            return 92;
         if ((active0 & 0x40120000000L) != 0L || (active1 & 0x103f80000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 8;
            return 92;
         }
         return -1;
      case 9:
         if ((active0 & 0x120000000L) != 0L)
            return 92;
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x103f80000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 9;
            return 92;
         }
         return -1;
      case 10:
         if ((active1 & 0x80000L) != 0L)
            return 92;
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x103f00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 10;
            return 92;
         }
         return -1;
      case 11:
         if ((active1 & 0x1000000L) != 0L)
            return 92;
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x102f00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 11;
            return 92;
         }
         return -1;
      case 12:
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x100000L) != 0L)
            return 92;
         if ((active1 & 0x102e00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 12;
            return 92;
         }
         return -1;
      case 13:
         if ((active1 & 0x200000L) != 0L)
            return 92;
         if ((active1 & 0x102c00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 13;
            return 92;
         }
         return -1;
      case 14:
         if ((active1 & 0x100000000L) != 0L)
            return 92;
         if ((active1 & 0x2c00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 14;
            return 92;
         }
         return -1;
      case 15:
         if ((active1 & 0x2000000L) != 0L)
            return 92;
         if ((active1 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 15;
            return 92;
         }
         return -1;
      case 16:
         if ((active1 & 0x400000L) != 0L)
            return 92;
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 16;
            return 92;
         }
         return -1;
      case 17:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 17;
            return 92;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x1000L);
      case 34:
         return jjStopAtPos(0, 152);
      case 36:
         return jjStartNfaWithStates_1(0, 156, 92);
      case 37:
         return jjStopAtPos(0, 147);
      case 39:
         return jjStartNfaWithStates_1(0, 151, 60);
      case 40:
         return jjStopAtPos(0, 119);
      case 41:
         return jjStopAtPos(0, 120);
      case 42:
         return jjStopAtPos(0, 145);
      case 43:
         return jjStopAtPos(0, 142);
      case 44:
         return jjStopAtPos(0, 131);
      case 45:
         return jjStartNfaWithStates_1(0, 144, 29);
      case 46:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x400000L);
      case 47:
         jjmatchedKind = 146;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x2000000000L);
      case 58:
         return jjStopAtPos(0, 136);
      case 59:
         return jjStopAtPos(0, 129);
      case 60:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8a00L);
      case 61:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x200000L);
      case 62:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x400L);
      case 63:
         return jjStopAtPos(0, 135);
      case 91:
         return jjStopAtPos(0, 127);
      case 92:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x40000000L);
      case 93:
         return jjStopAtPos(0, 128);
      case 94:
         return jjStopAtPos(0, 155);
      case 96:
         return jjStopAtPos(0, 153);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_1(0x1feL, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_1(0x1fe00L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_1(0xfe0000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_1(0x7f000000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_1(0x40000780000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x7800000000L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_1(0x18000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_1(0x60000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_1(0x3f80000000000L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_1(0x4000000000000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_1(0x8000000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_1(0x30000000000000L, 0x0L, 0x2000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_1(0x6080000000000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_1(0x8000000000000000L, 0x7L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x3f8L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x400L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_1(0x1f00000000000000L, 0x1800L, 0x20000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_1(0x0L, 0xfffe000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1f0000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x600000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x3800000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_1(0x0L, 0xc000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10000000000L, 0x0L);
      case 123:
         return jjStartNfaWithStates_1(0, 125, 91);
      case 124:
         jjmatchedKind = 154;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x100000L);
      case 125:
         return jjStopAtPos(0, 126);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 165, 87);
         break;
      case 46:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 61:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x8000L);
      case 62:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0xa080020001060000L, active1, 0x1810000400L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0xf18008006000200L, active1, 0xe000L, active2, 0x20000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x8L, active2, 0L);
      case 71:
      case 103:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000L, active1, 0xc120000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x5020040038007c00L, active1, 0x40000000L, active2, 0x2000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x8800000e0L, active1, 0x80000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x10000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x1f00300000006L, active1, 0x200000020L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x4001040708000L, active1, 0x10000021802L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x3e00000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x40012000800000L, active1, 0x80L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 49, 92);
         return jjMoveStringLiteralDfa2_1(active0, 0x10L, active1, 0x400000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x1c0000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000L, active1, 0x4000104L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_1(active0, 0x100L, active1, 0x200L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(1, 16, 92);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 124:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(2, 143);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000000080000L, active1, 0x10000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(2, 4, 92);
         return jjMoveStringLiteralDfa3_1(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(2, 1, 92);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(2, 33, 92);
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x80080L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0xc020000200L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000002000000L, active1, 0x8L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(2, 8, 92);
         return jjMoveStringLiteralDfa3_1(active0, 0x1000040000000420L, active1, 0L, active2, 0x20000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000400000000L, active1, 0x600000000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x2000L);
      case 76:
      case 108:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(2, 7, 92);
         return jjMoveStringLiteralDfa3_1(active0, 0x200004000100000L, active1, 0x3e02824L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(2, 90, 92);
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 62, 92);
         return jjMoveStringLiteralDfa3_1(active0, 0x300000200800L, active1, 0x10040000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x1a800808000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0x40001000000000L, active1, 0x1900120400L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(2, 95, 92);
         return jjMoveStringLiteralDfa3_1(active0, 0xc804000bc060000L, active1, 0x8004000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(2, 65, 92);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(2, 79, 92);
         return jjMoveStringLiteralDfa3_1(active0, 0x8001000001007240L, active1, 0x1100L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x40400000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 61, 92);
         break;
      case 89:
      case 121:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(2, 2, 92);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 51, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_1(active0, 0x7000L, active1, 0x803e00000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x80b000000L, active1, 0x101000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(3, 26, 92);
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 56, 92);
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x80000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(3, 17, 92);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(3, 31, 92);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 104, 92);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(3, 141, 92);
         return jjMoveStringLiteralDfa4_1(active0, 0x401100000000040L, active1, 0x100002180L, active2, 0x20000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000040000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x20020000000400L, active1, 0x1000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 38, 92);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(3, 66, 92);
         return jjMoveStringLiteralDfa4_1(active0, 0x108800L, active1, 0x10010800L, active2, 0L);
      case 77:
      case 109:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 37, 92);
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 50, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(3, 93, 92);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 102, 92);
         return jjMoveStringLiteralDfa4_1(active0, 0x400000L, active1, 0x400000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0xa40200000000020L, active1, 0x200000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(3, 73, 92);
         return jjMoveStringLiteralDfa4_1(active0, 0x100080000L, active1, 0x8000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x400800000L, active1, 0x4008L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(3, 18, 92);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 52, 92);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(3, 81, 92);
         return jjMoveStringLiteralDfa4_1(active0, 0x80400030000000L, active1, 0x8000400L, active2, 0L);
      case 85:
      case 117:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 101, 92);
         return jjMoveStringLiteralDfa4_1(active0, 0x8000010000000000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_1(active0, 0x200L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(3, 69, 92);
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x40000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x200400000181000L, active1, 0x1100000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_1(active0, 0x9000000L, active1, 0x600800L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x802000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 36, 92);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(4, 92, 92);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 103, 92);
         return jjMoveStringLiteralDfa5_1(active0, 0x80008000208200L, active1, 0x8080008L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(4, 98, 92);
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000L, active1, 0x40104400L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000L, active1, 0x10000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(4, 97, 92);
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000400L, active1, 0x1000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x2800L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 40, 92);
         break;
      case 82:
      case 114:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(4, 6, 92);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 44, 92);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 54, 92);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(4, 71, 92);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(4, 72, 92);
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000020000020L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(4, 23, 92);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x802000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(4, 22, 92);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(4, 35, 92);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 53, 92);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 58, 92);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 60, 92);
         return jjMoveStringLiteralDfa5_1(active0, 0x400000000L, active1, 0x1000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000002000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000L, active1, 0L, active2, 0x20000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_1(active0, 0x100000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000001008000L, active1, 0x800800800L, active2, 0L);
      case 66:
      case 98:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 45, 92);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_1(active0, 0x80000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 57, 92);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(5, 30, 92);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(5, 76, 92);
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000200L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(5, 11, 92);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 41, 92);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x100000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000020L, active1, 0x210000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0xa000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(5, 91, 92);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_1(active0, 0x400010001000L, active1, 0x1040000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000L, active1, 0x1004000L, active2, 0L);
      case 80:
      case 112:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(5, 157, 92);
         return jjMoveStringLiteralDfa6_1(active0, 0x40100000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(5, 13, 92);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 55, 92);
         return jjMoveStringLiteralDfa6_1(active0, 0x800000000200000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(5, 34, 92);
         break;
      case 84:
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(5, 10, 92);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(5, 67, 92);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(5, 77, 92);
         return jjMoveStringLiteralDfa6_1(active0, 0x8000100000L, active1, 0x400L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x400000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x80000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x101080000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x2000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x800400010000000L, active1, 0x1000000800L);
      case 68:
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(6, 12, 92);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(6, 20, 92);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(6, 27, 92);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x400000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x200000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x100000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x400L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 63, 92);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x800000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x800000000L);
      case 78:
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(6, 9, 92);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(6, 15, 92);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(6, 78, 92);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x10000L);
      case 82:
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(6, 14, 92);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 48, 92);
         return jjMoveStringLiteralDfa7_1(active0, 0x48000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(6, 21, 92);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(6, 25, 92);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(6, 94, 92);
         return jjMoveStringLiteralDfa7_1(active0, 0x100080020L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x200000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x1800000L);
      case 69:
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(7, 24, 92);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 46, 92);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 59, 92);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 100, 92);
         return jjMoveStringLiteralDfa8_1(active0, 0x80000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x400000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_1(active0, 0x20L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0x40100000000L, active1, 0L);
      case 75:
      case 107:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(7, 75, 92);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x2000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x400L);
      case 80:
      case 112:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(7, 99, 92);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x100000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x80000L);
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(7, 28, 92);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(7, 80, 92);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_1(active0, 0x20000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 39, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x900000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x1080000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x2000000L);
      case 77:
      case 109:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(8, 5, 92);
         break;
      case 78:
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(8, 74, 92);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x40100000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(8, 19, 92);
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x100200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_1(active0, 0x20000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x2000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x1000000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(9, 29, 92);
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x200000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x800000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x100000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x100000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x80000L);
      case 78:
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(9, 32, 92);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_1(active0, 0x40000000000L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x400000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_1(active0, 0x40000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x100900000L);
      case 80:
      case 112:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(10, 83, 92);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x2000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(11, 88, 92);
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x100400000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_1(active0, 0x40000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0xa00000L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_1(active0, 0L, active1, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_1(active0, 0L, active1, 0x100000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_1(active0, 0L, active1, 0x200000L);
      case 78:
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(12, 84, 92);
         return jjMoveStringLiteralDfa13_1(active0, 0L, active1, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_1(active0, 0L, active1, 0x2000000L);
      case 89:
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(12, 42, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_1(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_1(active1, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_1(active1, 0x400000L);
      case 84:
      case 116:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(13, 85, 92);
         return jjMoveStringLiteralDfa14_1(active1, 0x100000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_1(active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_1(12, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa14_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(12, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_1(active1, 0x800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa15_1(active1, 0x2000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_1(active1, 0x400000L);
      case 89:
      case 121:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(14, 96, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_1(13, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa15_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_1(active1, 0x400000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_1(active1, 0x800000L);
      case 84:
      case 116:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(15, 89, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_1(14, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa16_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_1(active1, 0x800000L);
      case 84:
      case 116:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(16, 86, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_1(15, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa17_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(15, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(16, 0L, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_1(active1, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_1(16, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa18_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(16, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(17, 0L, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(18, 87, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_1(17, 0L, active1, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 91;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 92:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 36)
                     jjCheckNAdd(34);
                  break;
               case 18:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  else if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 36)
                     jjCheckNAdd(34);
                  break;
               case 0:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                     jjAddStates(6, 7);
                  else if (curChar == 39)
                     jjCheckNAddStates(8, 11);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(53, 54);
                  else if (curChar == 7)
                  {
                     if (kind > 178)
                        kind = 178;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 35)
                  {
                     if (kind > 166)
                        kind = 166;
                     jjCheckNAddStates(12, 14);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAddStates(15, 21);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 60:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  else if (curChar == 39)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  if ((0xfc00f7faffffc9ffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 91:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(83, 84);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(80, 81);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(78, 79);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(54);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 43);
                  break;
               case 89:
                  if (curChar == 47)
                  {
                     if (kind > 166)
                        kind = 166;
                     jjCheckNAddStates(12, 14);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 63:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 64;
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 36)
                     jjCheckNAdd(34);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
               case 6:
                  if (curChar == 39)
                     jjCheckNAddStates(25, 27);
                  break;
               case 5:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 7:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 39 && kind > 111)
                     kind = 111;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
               case 14:
                  if (curChar == 39)
                     jjCheckNAddStates(28, 30);
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 15:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 39 && kind > 113)
                     kind = 113;
                  break;
               case 19:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 20:
                  if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  break;
               case 21:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 39 && kind > 114)
                     kind = 114;
                  break;
               case 23:
                  if (curChar != 35)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               case 24:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               case 25:
                  if ((0x2400L & l) != 0L && kind > 166)
                     kind = 166;
                  break;
               case 26:
                  if (curChar == 10 && kind > 166)
                     kind = 166;
                  break;
               case 27:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar != 32)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               case 29:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 32:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 36)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if (curChar != 36)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 36)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if (curChar != 36)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if (curChar == 7 && kind > 178)
                     kind = 178;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(15, 21);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(47, 43);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 43);
                  break;
               case 48:
                  if (curChar != 46)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(31, 33);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 52:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 43);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(54);
                  break;
               case 55:
                  if (curChar == 39)
                     jjCheckNAddStates(8, 11);
                  break;
               case 56:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 57:
                  if (curChar == 39)
                     jjCheckNAddStates(22, 24);
                  break;
               case 58:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 39 && kind > 112)
                     kind = 112;
                  break;
               case 61:
                  if (curChar == 39 && kind > 118)
                     kind = 118;
                  break;
               case 64:
               case 66:
                  if (curChar == 39)
                     jjCheckNAddStates(38, 40);
                  break;
               case 65:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 67:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 39 && kind > 115)
                     kind = 115;
                  break;
               case 69:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(71, 73);
                  break;
               case 71:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 72:
                  if (curChar == 34)
                     jjCheckNAddStates(41, 43);
                  break;
               case 73:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 34 && kind > 175)
                     kind = 175;
                  break;
               case 76:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 78:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 80:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 83:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 86:
                  if (curChar == 47)
                     jjAddStates(6, 7);
                  break;
               case 87:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 88:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 164)
                     kind = 164;
                  break;
               case 90:
                  if (curChar != 47)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 92:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  else if (curChar == 123)
                     jjAddStates(44, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(52, 53);
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 60:
                  jjCheckNAddStates(22, 24);
                  if ((0xffffff81ffffff81L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 91:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  else if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                  }
                  if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                  }
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  jjAddStates(25, 27);
                  break;
               case 9:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  jjAddStates(28, 30);
                  break;
               case 17:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 19:
                  jjAddStates(3, 5);
                  break;
               case 24:
                  if (kind > 166)
                     kind = 166;
                  jjAddStates(12, 14);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjAddStates(54, 55);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(38);
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 56:
                  jjCheckNAddStates(22, 24);
                  break;
               case 62:
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 65:
                  jjAddStates(38, 40);
                  break;
               case 71:
                  jjAddStates(41, 43);
                  break;
               case 75:
                  if (curChar == 123)
                     jjAddStates(44, 51);
                  break;
               case 77:
                  if ((0x1000000010L & l) != 0L && kind > 121)
                     kind = 121;
                  break;
               case 79:
                  if ((0x10000000100000L & l) != 0L && kind > 122)
                     kind = 122;
                  break;
               case 81:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x8000000080000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 84:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0x400000004000L & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 88:
                  if (kind > 164)
                     kind = 164;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 92:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(32, 33);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  break;
               case 18:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(32, 33);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  break;
               case 60:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 24);
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(32, 33);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(38);
                  }
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 27);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(28, 30);
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 24:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjAddStates(12, 14);
                  break;
               case 31:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 32:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjAddStates(54, 55);
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(38);
                  break;
               case 38:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(38);
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 24);
                  break;
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(38, 40);
                  break;
               case 71:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(41, 43);
                  break;
               case 88:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 164)
                     kind = 164;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 91 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x10000000L) != 0L)
            return 101;
         if ((active2 & 0x2000040000L) != 0L)
            return 99;
         if ((active2 & 0x800000L) != 0L)
            return 70;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x7L) != 0L)
         {
            jjmatchedKind = 174;
            return 18;
         }
         if ((active2 & 0x10000L) != 0L)
            return 29;
         if ((active0 & 0x7ffffffffffffffeL) != 0L || (active1 & 0x1f9fffffff8L) != 0L || (active2 & 0x20002000L) != 0L)
         {
            jjmatchedKind = 174;
            return 101;
         }
         if ((active2 & 0x400004L) != 0L)
            return 102;
         if ((active2 & 0x1000000L) != 0L)
            return 103;
         if ((active1 & 0x600000000L) != 0L)
         {
            jjmatchedKind = 174;
            return 73;
         }
         if ((active1 & 0x2000000000000000L) != 0L)
            return 104;
         if ((active2 & 0x2000000L) != 0L)
            return 105;
         return -1;
      case 1:
         if ((active0 & 0x3f80000010018L) != 0L || (active1 & 0xf3L) != 0L)
            return 101;
         if ((active2 & 0x2000000000L) != 0L)
            return 97;
         if ((active0 & 0xfffc07fffffeffe6L) != 0L || (active1 & 0x1ffffffff0cL) != 0L || (active2 & 0x20002000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 174;
               jjmatchedPos = 1;
            }
            return 101;
         }
         return -1;
      case 2:
         if ((active0 & 0x9ff477fdfffefe60L) != 0L || (active1 & 0x1ff7bf37facL) != 0L || (active2 & 0x20002000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 174;
               jjmatchedPos = 2;
            }
            return 101;
         }
         if ((active0 & 0x6009800200000196L) != 0L || (active1 & 0x840c8002L) != 0L)
            return 101;
         return -1;
      case 3:
         if ((active0 & 0x114006084060000L) != 0L || (active1 & 0x16020020224L) != 0L || (active2 & 0x2000L) != 0L)
            return 101;
         if ((active0 & 0x9ee1779d7bf8fe60L) != 0L || (active1 & 0x9f5bf97d88L) != 0L || (active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 3;
            return 101;
         }
         return -1;
      case 4:
         if ((active0 & 0x1460111800c00040L) != 0L || (active1 & 0x8610000180L) != 0L)
            return 101;
         if ((active0 & 0x8a8166857b38fe20L) != 0L || (active1 & 0x194bf97c08L) != 0L || (active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 4;
            return 101;
         }
         return -1;
      case 5:
         if ((active0 & 0x280220440002c00L) != 0L || (active1 & 0x8003008L) != 0L || (active2 & 0x20000000L) != 0L)
            return 101;
         if ((active0 & 0x880144813b38d220L) != 0L || (active1 & 0x1943f94c00L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 5;
            return 101;
         }
         return -1;
      case 6:
         if ((active0 & 0x800100000a30d200L) != 0L || (active1 & 0x40004000L) != 0L)
            return 101;
         if ((active0 & 0x800448131080020L) != 0L || (active1 & 0x1903f90c00L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 6;
            return 101;
         }
         return -1;
      case 7:
         if ((active0 & 0x800408011000000L) != 0L || (active1 & 0x1800010800L) != 0L)
            return 101;
         if ((active0 & 0x40120080020L) != 0L || (active1 & 0x103f80400L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 7;
            return 101;
         }
         return -1;
      case 8:
         if ((active0 & 0x80020L) != 0L || (active1 & 0x400L) != 0L)
            return 101;
         if ((active0 & 0x40120000000L) != 0L || (active1 & 0x103f80000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 8;
            return 101;
         }
         return -1;
      case 9:
         if ((active0 & 0x120000000L) != 0L)
            return 101;
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x103f80000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 9;
            return 101;
         }
         return -1;
      case 10:
         if ((active1 & 0x80000L) != 0L)
            return 101;
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x103f00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 10;
            return 101;
         }
         return -1;
      case 11:
         if ((active1 & 0x1000000L) != 0L)
            return 101;
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x102f00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 11;
            return 101;
         }
         return -1;
      case 12:
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x100000L) != 0L)
            return 101;
         if ((active1 & 0x102e00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 12;
            return 101;
         }
         return -1;
      case 13:
         if ((active1 & 0x200000L) != 0L)
            return 101;
         if ((active1 & 0x102c00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 13;
            return 101;
         }
         return -1;
      case 14:
         if ((active1 & 0x100000000L) != 0L)
            return 101;
         if ((active1 & 0x2c00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 14;
            return 101;
         }
         return -1;
      case 15:
         if ((active1 & 0x2000000L) != 0L)
            return 101;
         if ((active1 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 15;
            return 101;
         }
         return -1;
      case 16:
         if ((active1 & 0x400000L) != 0L)
            return 101;
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 16;
            return 101;
         }
         return -1;
      case 17:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 17;
            return 101;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L);
      case 34:
         return jjStartNfaWithStates_0(0, 152, 103);
      case 36:
         return jjStartNfaWithStates_0(0, 156, 101);
      case 37:
         return jjStopAtPos(0, 147);
      case 39:
         return jjStartNfaWithStates_0(0, 151, 70);
      case 40:
         return jjStopAtPos(0, 119);
      case 41:
         return jjStopAtPos(0, 120);
      case 42:
         return jjStopAtPos(0, 145);
      case 43:
         return jjStopAtPos(0, 142);
      case 44:
         return jjStopAtPos(0, 131);
      case 45:
         return jjStartNfaWithStates_0(0, 144, 29);
      case 46:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L);
      case 47:
         jjmatchedKind = 146;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000L);
      case 58:
         return jjStopAtPos(0, 136);
      case 59:
         return jjStopAtPos(0, 129);
      case 60:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8a00L);
      case 61:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000L);
      case 62:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400L);
      case 63:
         return jjStopAtPos(0, 135);
      case 91:
         return jjStopAtPos(0, 127);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L);
      case 93:
         return jjStopAtPos(0, 128);
      case 94:
         return jjStopAtPos(0, 155);
      case 96:
         return jjStartNfaWithStates_0(0, 153, 105);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1feL, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1fe00L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfe0000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7f000000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x40000780000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7800000000L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f80000000000L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x30000000000000L, 0x0L, 0x2000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x6080000000000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x7L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f8L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1f00000000000000L, 0x1800L, 0x20000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfffe000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f0000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x0L);
      case 123:
         return jjStartNfaWithStates_0(0, 125, 104);
      case 124:
         jjmatchedKind = 154;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
      case 125:
         return jjStopAtPos(0, 126);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 165, 97);
         break;
      case 46:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 61:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 62:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xa080020001060000L, active1, 0x1810000400L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xf18008006000200L, active1, 0xe000L, active2, 0x20000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 71:
      case 103:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0xc120000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x5020040038007c00L, active1, 0x40000000L, active2, 0x2000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8800000e0L, active1, 0x80000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1f00300000006L, active1, 0x200000020L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4001040708000L, active1, 0x10000021802L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3e00000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40012000800000L, active1, 0x80L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 49, 101);
         return jjMoveStringLiteralDfa2_0(active0, 0x10L, active1, 0x400000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1c0000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0x4000104L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0x200L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 101);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 124:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(2, 143);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000080000L, active1, 0x10000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 4, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 1, 101);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 101);
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80080L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc020000200L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000002000000L, active1, 0x8L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000040000000420L, active1, 0L, active2, 0x20000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000400000000L, active1, 0x600000000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 76:
      case 108:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0x200004000100000L, active1, 0x3e02824L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0x300000200800L, active1, 0x10040000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1a800808000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40001000000000L, active1, 0x1900120400L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 95, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0xc804000bc060000L, active1, 0x8004000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 101);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0x8001000001007240L, active1, 0x1100L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40400000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 101);
         break;
      case 89:
      case 121:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 2, 101);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x7000L, active1, 0x803e00000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80b000000L, active1, 0x101000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 101);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 101);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 101);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 141, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x401100000000040L, active1, 0x100002180L, active2, 0x20000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000040000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20020000000400L, active1, 0x1000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 101);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x108800L, active1, 0x10010800L, active2, 0L);
      case 77:
      case 109:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 101);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 101);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x400000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0xa40200000000020L, active1, 0x200000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x100080000L, active1, 0x8000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400800000L, active1, 0x4008L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 101);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 101);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x80400030000000L, active1, 0x8000400L, active2, 0L);
      case 85:
      case 117:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000010000000000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200400000181000L, active1, 0x1100000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x9000000L, active1, 0x600800L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x802000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 101);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 101);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 101);
         return jjMoveStringLiteralDfa5_0(active0, 0x80008000208200L, active1, 0x8080008L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 101);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x40104400L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x10000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 101);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000400L, active1, 0x1000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2800L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 101);
         break;
      case 82:
      case 114:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 101);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 101);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 101);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 101);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 101);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000020000020L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 101);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x802000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 101);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 101);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 101);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 101);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 101);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x1000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000002000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L, active2, 0x20000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000001008000L, active1, 0x800800800L, active2, 0L);
      case 66:
      case 98:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 101);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 101);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000200L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 101);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000020L, active1, 0x210000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0xa000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x400010001000L, active1, 0x1040000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0x1004000L, active2, 0L);
      case 80:
      case 112:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 157, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0x40100000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 101);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000200000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 101);
         break;
      case 84:
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 101);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 101);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000100000L, active1, 0x400L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x101080000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800400010000000L, active1, 0x1000000800L);
      case 68:
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 101);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 101);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 101);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 101);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000L);
      case 78:
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 101);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 101);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 101);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L);
      case 82:
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 101);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 101);
         return jjMoveStringLiteralDfa7_0(active0, 0x48000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 101);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 101);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 101);
         return jjMoveStringLiteralDfa7_0(active0, 0x100080020L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1800000L);
      case 69:
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 101);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 101);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 101);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 100, 101);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x40100000000L, active1, 0L);
      case 75:
      case 107:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 101);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      case 80:
      case 112:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 99, 101);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L);
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 101);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 101);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x900000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1080000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L);
      case 77:
      case 109:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 5, 101);
         break;
      case 78:
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 74, 101);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40100000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 101);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 101);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000L);
      case 78:
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 32, 101);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100900000L);
      case 80:
      case 112:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(10, 83, 101);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 88, 101);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100400000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xa00000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000L);
      case 78:
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(12, 84, 101);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000000L);
      case 89:
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 42, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active1, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active1, 0x400000L);
      case 84:
      case 116:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(13, 85, 101);
         return jjMoveStringLiteralDfa14_0(active1, 0x100000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active1, 0x800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa15_0(active1, 0x2000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_0(active1, 0x400000L);
      case 89:
      case 121:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(14, 96, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active1, 0x400000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active1, 0x800000L);
      case 84:
      case 116:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(15, 89, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active1, 0x800000L);
      case 84:
      case 116:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(16, 86, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active1, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(18, 87, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 101;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 105:
               case 32:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(58, 60);
                  break;
               case 73:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 74;
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  if (curChar == 36)
                     jjCheckNAdd(44);
                  break;
               case 99:
                  if (curChar == 47)
                  {
                     if (kind > 166)
                        kind = 166;
                     jjCheckNAddStates(12, 14);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 104:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(93, 94);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(90, 91);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(88, 89);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 101:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  if (curChar == 36)
                     jjCheckNAdd(44);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(64);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 53);
                  break;
               case 18:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  else if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  if (curChar == 36)
                     jjCheckNAdd(44);
                  break;
               case 0:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  else if (curChar == 47)
                     jjAddStates(64, 65);
                  else if (curChar == 39)
                     jjCheckNAddStates(66, 69);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(63, 64);
                  else if (curChar == 7)
                  {
                     if (kind > 178)
                        kind = 178;
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(37, 39);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 35)
                  {
                     if (kind > 166)
                        kind = 166;
                     jjCheckNAddStates(12, 14);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAddStates(70, 76);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 103:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(77, 79);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 70:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(80, 82);
                  else if (curChar == 39)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  if ((0xfc00f7faffffc9ffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
               case 6:
                  if (curChar == 39)
                     jjCheckNAddStates(25, 27);
                  break;
               case 5:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 7:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 39 && kind > 111)
                     kind = 111;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
               case 14:
                  if (curChar == 39)
                     jjCheckNAddStates(28, 30);
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 15:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 39 && kind > 113)
                     kind = 113;
                  break;
               case 19:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 20:
                  if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  break;
               case 21:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 39 && kind > 114)
                     kind = 114;
                  break;
               case 23:
                  if (curChar != 35)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               case 24:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               case 25:
                  if ((0x2400L & l) != 0L && kind > 166)
                     kind = 166;
                  break;
               case 26:
                  if (curChar == 10 && kind > 166)
                     kind = 166;
                  break;
               case 27:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar != 32)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               case 29:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 36:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(37, 39);
                  break;
               case 37:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(77, 79);
                  break;
               case 38:
                  if (curChar == 34)
                     jjCheckNAddStates(77, 79);
                  break;
               case 39:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 34 && kind > 171)
                     kind = 171;
                  break;
               case 41:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 42:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 36)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if (curChar != 36)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar == 36)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if (curChar != 36)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if (curChar == 7 && kind > 178)
                     kind = 178;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(70, 76);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(55);
                  break;
               case 56:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(57, 53);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 53);
                  break;
               case 58:
                  if (curChar != 46)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(59);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(83, 85);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(86, 89);
                  break;
               case 62:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 53);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if (curChar == 39)
                     jjCheckNAddStates(66, 69);
                  break;
               case 66:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(80, 82);
                  break;
               case 67:
                  if (curChar == 39)
                     jjCheckNAddStates(80, 82);
                  break;
               case 68:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 39 && kind > 112)
                     kind = 112;
                  break;
               case 71:
                  if (curChar == 39 && kind > 118)
                     kind = 118;
                  break;
               case 74:
               case 76:
                  if (curChar == 39)
                     jjCheckNAddStates(90, 92);
                  break;
               case 75:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(90, 92);
                  break;
               case 77:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 39 && kind > 115)
                     kind = 115;
                  break;
               case 79:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(81, 83);
                  break;
               case 81:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(93, 95);
                  break;
               case 82:
                  if (curChar == 34)
                     jjCheckNAddStates(93, 95);
                  break;
               case 83:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 34 && kind > 175)
                     kind = 175;
                  break;
               case 86:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 88:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 90:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 93:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(93, 94);
                  break;
               case 96:
                  if (curChar == 47)
                     jjAddStates(64, 65);
                  break;
               case 97:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 164)
                     kind = 164;
                  break;
               case 100:
                  if (curChar != 47)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 105:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddStates(58, 60);
                  else if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 104:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  else if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                  }
                  if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                  }
                  break;
               case 101:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 123)
                     jjAddStates(96, 103);
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(32, 34);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(104, 105);
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 103:
               case 37:
                  jjCheckNAddStates(77, 79);
                  break;
               case 70:
                  jjCheckNAddStates(80, 82);
                  if ((0xffffff81ffffff81L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 1:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  jjAddStates(25, 27);
                  break;
               case 9:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  jjAddStates(28, 30);
                  break;
               case 17:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 19:
                  jjAddStates(3, 5);
                  break;
               case 24:
                  if (kind > 166)
                     kind = 166;
                  jjAddStates(12, 14);
                  break;
               case 31:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(32, 34);
                  break;
               case 32:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddStates(58, 60);
                  break;
               case 33:
                  if (curChar == 96)
                     jjCheckNAddStates(58, 60);
                  break;
               case 34:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 96 && kind > 170)
                     kind = 170;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjAddStates(56, 57);
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(48);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(106, 107);
                  break;
               case 66:
                  jjCheckNAddStates(80, 82);
                  break;
               case 72:
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(104, 105);
                  break;
               case 75:
                  jjAddStates(90, 92);
                  break;
               case 81:
                  jjAddStates(93, 95);
                  break;
               case 85:
                  if (curChar == 123)
                     jjAddStates(96, 103);
                  break;
               case 87:
                  if ((0x1000000010L & l) != 0L && kind > 121)
                     kind = 121;
                  break;
               case 89:
                  if ((0x10000000100000L & l) != 0L && kind > 122)
                     kind = 122;
                  break;
               case 91:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x8000000080000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 94:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x400000004000L & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 98:
                  if (kind > 164)
                     kind = 164;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 105:
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(58, 60);
                  break;
               case 73:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(61, 63);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(42, 43);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  break;
               case 101:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(61, 63);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(42, 43);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  break;
               case 18:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(61, 63);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(42, 43);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(61, 63);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(48);
                  }
                  break;
               case 103:
               case 37:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(77, 79);
                  break;
               case 70:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(80, 82);
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 27);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(28, 30);
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 24:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjAddStates(12, 14);
                  break;
               case 41:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(61, 63);
                  break;
               case 42:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjAddStates(56, 57);
                  break;
               case 46:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(48);
                  break;
               case 48:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(48);
                  break;
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(80, 82);
                  break;
               case 75:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(90, 92);
                  break;
               case 81:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(93, 95);
                  break;
               case 98:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 164)
                     kind = 164;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 101 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x10000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 168);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffffffffffffffeL) != 0L || (active1 & 0x1f9fffffff8L) != 0L || (active2 & 0x20002000L) != 0L)
         {
            jjmatchedKind = 174;
            return 96;
         }
         if ((active2 & 0x2000040000L) != 0L)
            return 94;
         if ((active2 & 0x800000L) != 0L)
            return 65;
         if ((active2 & 0x10000L) != 0L)
            return 29;
         if ((active2 & 0x10000000L) != 0L)
            return 96;
         if ((active1 & 0x600000000L) != 0L)
         {
            jjmatchedKind = 174;
            return 68;
         }
         if ((active2 & 0x400004L) != 0L)
            return 97;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x7L) != 0L)
         {
            jjmatchedKind = 174;
            return 18;
         }
         if ((active1 & 0x2000000000000000L) != 0L)
            return 98;
         if ((active1 & 0x8000000000000000L) != 0L)
            return 99;
         return -1;
      case 1:
         if ((active0 & 0x3f80000010018L) != 0L || (active1 & 0xf3L) != 0L)
            return 96;
         if ((active2 & 0x2000000000L) != 0L)
            return 92;
         if ((active0 & 0xfffc07fffffeffe6L) != 0L || (active1 & 0x1ffffffff0cL) != 0L || (active2 & 0x20002000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 174;
               jjmatchedPos = 1;
            }
            return 96;
         }
         return -1;
      case 2:
         if ((active0 & 0x9ff477fdfffefe60L) != 0L || (active1 & 0x1ff7bf37facL) != 0L || (active2 & 0x20002000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 174;
               jjmatchedPos = 2;
            }
            return 96;
         }
         if ((active0 & 0x6009800200000196L) != 0L || (active1 & 0x840c8002L) != 0L)
            return 96;
         return -1;
      case 3:
         if ((active0 & 0x114006084060000L) != 0L || (active1 & 0x16020020224L) != 0L || (active2 & 0x2000L) != 0L)
            return 96;
         if ((active0 & 0x9ee1779d7bf8fe60L) != 0L || (active1 & 0x9f5bf97d88L) != 0L || (active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 3;
            return 96;
         }
         return -1;
      case 4:
         if ((active0 & 0x1460111800c00040L) != 0L || (active1 & 0x8610000180L) != 0L)
            return 96;
         if ((active0 & 0x8a8166857b38fe20L) != 0L || (active1 & 0x194bf97c08L) != 0L || (active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 4;
            return 96;
         }
         return -1;
      case 5:
         if ((active0 & 0x280220440002c00L) != 0L || (active1 & 0x8003008L) != 0L || (active2 & 0x20000000L) != 0L)
            return 96;
         if ((active0 & 0x880144813b38d220L) != 0L || (active1 & 0x1943f94c00L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 5;
            return 96;
         }
         return -1;
      case 6:
         if ((active0 & 0x800100000a30d200L) != 0L || (active1 & 0x40004000L) != 0L)
            return 96;
         if ((active0 & 0x800448131080020L) != 0L || (active1 & 0x1903f90c00L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 6;
            return 96;
         }
         return -1;
      case 7:
         if ((active0 & 0x800408011000000L) != 0L || (active1 & 0x1800010800L) != 0L)
            return 96;
         if ((active0 & 0x40120080020L) != 0L || (active1 & 0x103f80400L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 7;
            return 96;
         }
         return -1;
      case 8:
         if ((active0 & 0x80020L) != 0L || (active1 & 0x400L) != 0L)
            return 96;
         if ((active0 & 0x40120000000L) != 0L || (active1 & 0x103f80000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 8;
            return 96;
         }
         return -1;
      case 9:
         if ((active0 & 0x120000000L) != 0L)
            return 96;
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x103f80000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 9;
            return 96;
         }
         return -1;
      case 10:
         if ((active1 & 0x80000L) != 0L)
            return 96;
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x103f00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 10;
            return 96;
         }
         return -1;
      case 11:
         if ((active1 & 0x1000000L) != 0L)
            return 96;
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x102f00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 11;
            return 96;
         }
         return -1;
      case 12:
         if ((active1 & 0x102e00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 12;
            return 96;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x100000L) != 0L)
            return 96;
         return -1;
      case 13:
         if ((active1 & 0x200000L) != 0L)
            return 96;
         if ((active1 & 0x102c00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 13;
            return 96;
         }
         return -1;
      case 14:
         if ((active1 & 0x100000000L) != 0L)
            return 96;
         if ((active1 & 0x2c00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 14;
            return 96;
         }
         return -1;
      case 15:
         if ((active1 & 0x2000000L) != 0L)
            return 96;
         if ((active1 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 15;
            return 96;
         }
         return -1;
      case 16:
         if ((active1 & 0x400000L) != 0L)
            return 96;
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 16;
            return 96;
         }
         return -1;
      case 17:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 17;
            return 96;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x1000L);
      case 34:
         return jjStopAtPos(0, 152);
      case 36:
         return jjStartNfaWithStates_2(0, 156, 96);
      case 37:
         return jjStopAtPos(0, 147);
      case 39:
         return jjStartNfaWithStates_2(0, 151, 65);
      case 40:
         return jjStopAtPos(0, 119);
      case 41:
         return jjStopAtPos(0, 120);
      case 42:
         return jjStopAtPos(0, 145);
      case 43:
         return jjStopAtPos(0, 142);
      case 44:
         return jjStopAtPos(0, 131);
      case 45:
         return jjStartNfaWithStates_2(0, 144, 29);
      case 46:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x400000L);
      case 47:
         jjmatchedKind = 146;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x2000000000L);
      case 58:
         return jjStopAtPos(0, 136);
      case 59:
         return jjStopAtPos(0, 129);
      case 60:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x8a00L);
      case 61:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x200000L);
      case 62:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x400L);
      case 63:
         return jjStopAtPos(0, 135);
      case 91:
         return jjStartNfaWithStates_2(0, 127, 99);
      case 92:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x40000000L);
      case 93:
         return jjStopAtPos(0, 128);
      case 94:
         return jjStopAtPos(0, 155);
      case 96:
         return jjStopAtPos(0, 153);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_2(0x1feL, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_2(0x1fe00L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_2(0xfe0000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_2(0x7f000000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_2(0x40000780000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_2(0x7800000000L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_2(0x18000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_2(0x60000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_2(0x3f80000000000L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_2(0x4000000000000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_2(0x8000000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_2(0x30000000000000L, 0x0L, 0x2000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_2(0x6080000000000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_2(0x8000000000000000L, 0x7L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x3f8L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x400L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_2(0x1f00000000000000L, 0x1800L, 0x20000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_2(0x0L, 0xfffe000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1f0000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x600000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x3800000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_2(0x0L, 0xc000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x10000000000L, 0x0L);
      case 123:
         return jjStartNfaWithStates_2(0, 125, 98);
      case 124:
         jjmatchedKind = 154;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x100000L);
      case 125:
         return jjStopAtPos(0, 126);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 165, 92);
         break;
      case 46:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 61:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x8000L);
      case 62:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0xa080020001060000L, active1, 0x1810000400L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0xf18008006000200L, active1, 0xe000L, active2, 0x20000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x8L, active2, 0L);
      case 71:
      case 103:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000L, active1, 0xc120000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x5020040038007c00L, active1, 0x40000000L, active2, 0x2000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x8800000e0L, active1, 0x80000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x10000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x1f00300000006L, active1, 0x200000020L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x4001040708000L, active1, 0x10000021802L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x3e00000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x40012000800000L, active1, 0x80L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 49, 96);
         return jjMoveStringLiteralDfa2_2(active0, 0x10L, active1, 0x400000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x1c0000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x4000000000L, active1, 0x4000104L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_2(active0, 0x100L, active1, 0x200L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_2(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 96);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 124:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(2, 143);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000000080000L, active1, 0x10000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(2, 4, 96);
         return jjMoveStringLiteralDfa3_2(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(2, 1, 96);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(2, 33, 96);
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x80080L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0xc020000200L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000002000000L, active1, 0x8L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(2, 8, 96);
         return jjMoveStringLiteralDfa3_2(active0, 0x1000040000000420L, active1, 0L, active2, 0x20000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x4000400000000L, active1, 0x600000000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x2000L);
      case 76:
      case 108:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(2, 7, 96);
         return jjMoveStringLiteralDfa3_2(active0, 0x200004000100000L, active1, 0x3e02824L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(2, 90, 96);
         return jjMoveStringLiteralDfa3_2(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 62, 96);
         return jjMoveStringLiteralDfa3_2(active0, 0x300000200800L, active1, 0x10040000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x1a800808000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_2(active0, 0x40001000000000L, active1, 0x1900120400L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(2, 95, 96);
         return jjMoveStringLiteralDfa3_2(active0, 0xc804000bc060000L, active1, 0x8004000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(2, 65, 96);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(2, 79, 96);
         return jjMoveStringLiteralDfa3_2(active0, 0x8001000001007240L, active1, 0x1100L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x40400000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_2(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 61, 96);
         break;
      case 89:
      case 121:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(2, 2, 96);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 51, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_2(active0, 0x7000L, active1, 0x803e00000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x80b000000L, active1, 0x101000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_2(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(3, 26, 96);
         return jjMoveStringLiteralDfa4_2(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 56, 96);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x80000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(3, 17, 96);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(3, 31, 96);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 104, 96);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(3, 141, 96);
         return jjMoveStringLiteralDfa4_2(active0, 0x401100000000040L, active1, 0x100002180L, active2, 0x20000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_2(active0, 0x1000040000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0x20020000000400L, active1, 0x1000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 38, 96);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(3, 66, 96);
         return jjMoveStringLiteralDfa4_2(active0, 0x108800L, active1, 0x10010800L, active2, 0L);
      case 77:
      case 109:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 37, 96);
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 50, 96);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(3, 93, 96);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 102, 96);
         return jjMoveStringLiteralDfa4_2(active0, 0x400000L, active1, 0x400000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_2(active0, 0xa40200000000020L, active1, 0x200000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(3, 73, 96);
         return jjMoveStringLiteralDfa4_2(active0, 0x100080000L, active1, 0x8000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0x400800000L, active1, 0x4008L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(3, 18, 96);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 52, 96);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(3, 81, 96);
         return jjMoveStringLiteralDfa4_2(active0, 0x80400030000000L, active1, 0x8000400L, active2, 0L);
      case 85:
      case 117:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 101, 96);
         return jjMoveStringLiteralDfa4_2(active0, 0x8000010000000000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_2(active0, 0x200000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_2(active0, 0x200L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(3, 69, 96);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x40000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_2(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0x200400000181000L, active1, 0x1100000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_2(active0, 0x9000000L, active1, 0x600800L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x802000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_2(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 36, 96);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(4, 92, 96);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 103, 96);
         return jjMoveStringLiteralDfa5_2(active0, 0x80008000208200L, active1, 0x8080008L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(4, 98, 96);
         return jjMoveStringLiteralDfa5_2(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x10000000L, active1, 0x40104400L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_2(active0, 0x40000000L, active1, 0x10000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(4, 97, 96);
         return jjMoveStringLiteralDfa5_2(active0, 0x20000000400L, active1, 0x1000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_2(active0, 0x2800L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 40, 96);
         break;
      case 82:
      case 114:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(4, 6, 96);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 44, 96);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 54, 96);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(4, 71, 96);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(4, 72, 96);
         return jjMoveStringLiteralDfa5_2(active0, 0x8000000020000020L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(4, 23, 96);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x802000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(4, 22, 96);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_2(4, 35, 96);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 53, 96);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 58, 96);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 60, 96);
         return jjMoveStringLiteralDfa5_2(active0, 0x400000000L, active1, 0x1000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_2(active0, 0x800000002000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa5_2(active0, 0x4000L, active1, 0L, active2, 0x20000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_2(active0, 0x100000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_2(active0, 0x8000000001008000L, active1, 0x800800800L, active2, 0L);
      case 66:
      case 98:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 45, 96);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_2(active0, 0x80000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 57, 96);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(5, 30, 96);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(5, 76, 96);
         return jjMoveStringLiteralDfa6_2(active0, 0x1000000000200L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(5, 11, 96);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 41, 96);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x100000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0x20000020L, active1, 0x210000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_2(active0, 0xa000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(5, 91, 96);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_2(active0, 0x400010001000L, active1, 0x1040000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_2(active0, 0x4000L, active1, 0x1004000L, active2, 0L);
      case 80:
      case 112:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(5, 157, 96);
         return jjMoveStringLiteralDfa6_2(active0, 0x40100000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(5, 13, 96);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 55, 96);
         return jjMoveStringLiteralDfa6_2(active0, 0x800000000200000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(5, 34, 96);
         break;
      case 84:
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(5, 10, 96);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(5, 67, 96);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(5, 77, 96);
         return jjMoveStringLiteralDfa6_2(active0, 0x8000100000L, active1, 0x400L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x400000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x80000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x101080000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x2000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_2(active0, 0x20000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0x800400010000000L, active1, 0x1000000800L);
      case 68:
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(6, 12, 96);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(6, 20, 96);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(6, 27, 96);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x400000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x200000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x100000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x400L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 63, 96);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x800000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x800000000L);
      case 78:
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(6, 9, 96);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(6, 15, 96);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(6, 78, 96);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x10000L);
      case 82:
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(6, 14, 96);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 48, 96);
         return jjMoveStringLiteralDfa7_2(active0, 0x48000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_2(active0, 0x1000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(6, 21, 96);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(6, 25, 96);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(6, 94, 96);
         return jjMoveStringLiteralDfa7_2(active0, 0x100080020L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x200000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x1800000L);
      case 69:
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(7, 24, 96);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 46, 96);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 59, 96);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 100, 96);
         return jjMoveStringLiteralDfa8_2(active0, 0x80000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x400000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_2(active0, 0x20L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_2(active0, 0x40100000000L, active1, 0L);
      case 75:
      case 107:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(7, 75, 96);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x2000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x400L);
      case 80:
      case 112:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_2(7, 99, 96);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x100000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x80000L);
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(7, 28, 96);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(7, 80, 96);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_2(active0, 0x20000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 39, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_2(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x900000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x1080000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x2000000L);
      case 77:
      case 109:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(8, 5, 96);
         break;
      case 78:
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(8, 74, 96);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_2(active0, 0x40100000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(8, 19, 96);
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x100200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_2(active0, 0x20000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x2000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x1000000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(9, 29, 96);
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x200000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x800000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x100000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x100000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x80000L);
      case 78:
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(9, 32, 96);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_2(active0, 0x40000000000L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x400000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_2(active0, 0x40000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x100900000L);
      case 80:
      case 112:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(10, 83, 96);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x2000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_2(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(11, 88, 96);
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x100400000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_2(active0, 0x40000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0xa00000L);
      default :
         break;
   }
   return jjStartNfa_2(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_2(active0, 0L, active1, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_2(active0, 0L, active1, 0x100000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_2(active0, 0L, active1, 0x200000L);
      case 78:
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(12, 84, 96);
         return jjMoveStringLiteralDfa13_2(active0, 0L, active1, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_2(active0, 0L, active1, 0x2000000L);
      case 89:
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(12, 42, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_2(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_2(active1, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_2(active1, 0x400000L);
      case 84:
      case 116:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(13, 85, 96);
         return jjMoveStringLiteralDfa14_2(active1, 0x100000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_2(active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_2(12, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa14_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(12, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_2(active1, 0x800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa15_2(active1, 0x2000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_2(active1, 0x400000L);
      case 89:
      case 121:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(14, 96, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_2(13, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa15_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_2(active1, 0x400000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_2(active1, 0x800000L);
      case 84:
      case 116:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(15, 89, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_2(14, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa16_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_2(active1, 0x800000L);
      case 84:
      case 116:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(16, 86, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_2(15, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa17_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(15, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(16, 0L, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_2(active1, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_2(16, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa18_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(16, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(17, 0L, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(18, 87, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_2(17, 0L, active1, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 96;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 99:
               case 32:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(58, 60);
                  break;
               case 96:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  if (curChar == 36)
                     jjCheckNAdd(39);
                  break;
               case 18:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  else if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  if (curChar == 36)
                     jjCheckNAdd(39);
                  break;
               case 94:
                  if (curChar == 47)
                  {
                     if (kind > 166)
                        kind = 166;
                     jjCheckNAddStates(12, 14);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 0:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  else if (curChar == 47)
                     jjAddStates(111, 112);
                  else if (curChar == 39)
                     jjCheckNAddStates(113, 116);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(58, 59);
                  else if (curChar == 7)
                  {
                     if (kind > 178)
                        kind = 178;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 35)
                  {
                     if (kind > 166)
                        kind = 166;
                     jjCheckNAddStates(12, 14);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAddStates(117, 123);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 98:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(88, 89);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(85, 86);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(83, 84);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 48);
                  break;
               case 68:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 75;
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 69;
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  if (curChar == 36)
                     jjCheckNAdd(39);
                  break;
               case 65:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(124, 126);
                  else if (curChar == 39)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  if ((0xfc00f7faffffc9ffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
               case 6:
                  if (curChar == 39)
                     jjCheckNAddStates(25, 27);
                  break;
               case 5:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 7:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 39 && kind > 111)
                     kind = 111;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
               case 14:
                  if (curChar == 39)
                     jjCheckNAddStates(28, 30);
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 15:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 39 && kind > 113)
                     kind = 113;
                  break;
               case 19:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 20:
                  if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  break;
               case 21:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 39 && kind > 114)
                     kind = 114;
                  break;
               case 23:
                  if (curChar != 35)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               case 24:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               case 25:
                  if ((0x2400L & l) != 0L && kind > 166)
                     kind = 166;
                  break;
               case 26:
                  if (curChar == 10 && kind > 166)
                     kind = 166;
                  break;
               case 27:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar != 32)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               case 29:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 37:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar == 36)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if (curChar != 36)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 36)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if (curChar != 36)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if (curChar == 7 && kind > 178)
                     kind = 178;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(117, 123);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(52, 48);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 48);
                  break;
               case 53:
                  if (curChar != 46)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(54);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(127, 129);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(130, 133);
                  break;
               case 57:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 48);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(59);
                  break;
               case 60:
                  if (curChar == 39)
                     jjCheckNAddStates(113, 116);
                  break;
               case 61:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(124, 126);
                  break;
               case 62:
                  if (curChar == 39)
                     jjCheckNAddStates(124, 126);
                  break;
               case 63:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 39 && kind > 112)
                     kind = 112;
                  break;
               case 66:
                  if (curChar == 39 && kind > 118)
                     kind = 118;
                  break;
               case 69:
               case 71:
                  if (curChar == 39)
                     jjCheckNAddStates(134, 136);
                  break;
               case 70:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(134, 136);
                  break;
               case 72:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 39 && kind > 115)
                     kind = 115;
                  break;
               case 74:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(76, 78);
                  break;
               case 76:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(137, 139);
                  break;
               case 77:
                  if (curChar == 34)
                     jjCheckNAddStates(137, 139);
                  break;
               case 78:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 34 && kind > 175)
                     kind = 175;
                  break;
               case 81:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 83:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 85:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(85, 86);
                  break;
               case 88:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 91:
                  if (curChar == 47)
                     jjAddStates(111, 112);
                  break;
               case 92:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 164)
                     kind = 164;
                  break;
               case 95:
                  if (curChar != 47)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(12, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 99:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddStates(58, 60);
                  else if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 96:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  else if (curChar == 123)
                     jjAddStates(140, 147);
                  else if (curChar == 91)
                     jjCheckNAddTwoStates(32, 34);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(148, 149);
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 98:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  else if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                  }
                  if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                  }
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 65:
                  jjCheckNAddStates(124, 126);
                  if ((0xffffff81ffffff81L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 1:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  jjAddStates(25, 27);
                  break;
               case 9:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  jjAddStates(28, 30);
                  break;
               case 17:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 19:
                  jjAddStates(3, 5);
                  break;
               case 24:
                  if (kind > 166)
                     kind = 166;
                  jjAddStates(12, 14);
                  break;
               case 31:
                  if (curChar == 91)
                     jjCheckNAddTwoStates(32, 34);
                  break;
               case 32:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddStates(58, 60);
                  break;
               case 33:
                  if (curChar == 93)
                     jjCheckNAddStates(58, 60);
                  break;
               case 34:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 93 && kind > 172)
                     kind = 172;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjAddStates(150, 151);
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(43);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(152, 153);
                  break;
               case 61:
                  jjCheckNAddStates(124, 126);
                  break;
               case 67:
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(148, 149);
                  break;
               case 70:
                  jjAddStates(134, 136);
                  break;
               case 76:
                  jjAddStates(137, 139);
                  break;
               case 80:
                  if (curChar == 123)
                     jjAddStates(140, 147);
                  break;
               case 82:
                  if ((0x1000000010L & l) != 0L && kind > 121)
                     kind = 121;
                  break;
               case 84:
                  if ((0x10000000100000L & l) != 0L && kind > 122)
                     kind = 122;
                  break;
               case 86:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x8000000080000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 89:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x400000004000L & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 93:
                  if (kind > 164)
                     kind = 164;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 99:
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(58, 60);
                  break;
               case 96:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(108, 110);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(37, 38);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  break;
               case 18:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(108, 110);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(37, 38);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(108, 110);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  break;
               case 68:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(108, 110);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(37, 38);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 174)
                        kind = 174;
                     jjCheckNAdd(43);
                  }
                  break;
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(124, 126);
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 27);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(28, 30);
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 24:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjAddStates(12, 14);
                  break;
               case 36:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(108, 110);
                  break;
               case 37:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjAddStates(150, 151);
                  break;
               case 41:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 42:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(43);
                  break;
               case 61:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(124, 126);
                  break;
               case 70:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(134, 136);
                  break;
               case 76:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(137, 139);
                  break;
               case 93:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 164)
                     kind = 164;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 96 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x8000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   31, 32, 33, 19, 21, 22, 89, 90, 56, 58, 59, 60, 24, 25, 27, 41, 
   42, 46, 43, 48, 50, 51, 56, 58, 59, 5, 7, 8, 13, 15, 16, 48, 
   49, 50, 46, 47, 43, 51, 65, 67, 68, 71, 73, 74, 76, 77, 78, 79, 
   80, 81, 83, 84, 63, 69, 34, 35, 44, 45, 32, 34, 35, 41, 42, 43, 
   99, 100, 66, 68, 69, 70, 51, 52, 56, 53, 58, 60, 61, 37, 39, 40, 
   66, 68, 69, 58, 59, 60, 56, 57, 53, 61, 75, 77, 78, 81, 83, 84, 
   86, 87, 88, 89, 90, 91, 93, 94, 73, 79, 54, 55, 36, 37, 38, 94, 
   95, 61, 63, 64, 65, 46, 47, 51, 48, 53, 55, 56, 61, 63, 64, 53, 
   54, 55, 51, 52, 48, 56, 70, 72, 73, 76, 78, 79, 81, 82, 83, 84, 
   85, 86, 88, 89, 68, 74, 39, 40, 49, 50, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\50", "\51", null, null, null, null, 
"\173", "\175", "\133", "\135", "\73", "\56", "\54", "\75", "\76", "\74", "\77", 
"\72", "\74\75", "\76\75", "\74\76", "\41\75", null, "\53", "\74\75\76", "\55", 
"\52", "\57", "\45", "\174\174", "\75\76", "\56\56", "\47", "\42", "\140", "\174", 
"\136", "\44", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "DQID",
   "BTID",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xffcf8fffffffffffL, 0x4fc007fffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x0L, 0x1cf80000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x18000000000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x23000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[101];
private final int[] jjstateSet = new int[202];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public SqlParserImplTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SqlParserImplTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 101; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 169)
         {
            jjmatchedKind = 169;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 169)
         {
            jjmatchedKind = 169;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 167 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              popState();
         break;
      case 168 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  popState();
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 164 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                     pushState();
         break;
      case 165 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
           pushState();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
